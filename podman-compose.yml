# 🐳 V7 项目 - 生产环境容器编排
# 架构：Web(nginx) + Backend(gRPC+gRPC-Web) + Analytics-Engine(gRPC)
# 通信：Browser → nginx → Backend gRPC-Web:50053

version: '3.8'

services:
  # 🦀 后端服务 - 支持 gRPC 和 gRPC-Web
  backend:
    image: ${BACKEND_IMAGE:-ghcr.io/hellocplusplus0/v7/backend:latest}
    container_name: v7-backend
    restart: unless-stopped
    
    # 🔌 端口映射
    ports:
      - "3000:3000"    # 健康检查和指标
      - "50053:50053"  # gRPC + gRPC-Web 服务
    
    # 🌍 环境变量
    environment:
      - RUST_LOG=${RUST_LOG:-info}
      - DATABASE_URL=${DATABASE_URL:-sqlite:/app/data/prod.db}
      - REST_PORT=3000
      - GRPC_PORT=50053
      - TZ=Asia/Shanghai
      - ENABLE_CORS=true
      - MAX_CONNECTIONS=100
      - RUST_BACKTRACE=1
      - MALLOC_ARENA_MAX=2
      # Analytics Engine连接配置
      - ANALYTICS_ENGINE_ADDR=analytics-engine:50051
    
    volumes:
      - ./data:/app/data:Z
      - ./logs/backend:/app/logs:Z
      - ./config:/app/config:ro,Z
      - analytics-socket:/tmp/analytics:Z  # Unix socket 通信
    
    networks:
      - v7-network
    
    deploy:
      resources:
        limits:
          memory: 768M
          cpus: '1.0'
        reservations:
          memory: 384M
          cpus: '0.3'
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    
    user: "1002:1002"
    
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    
    depends_on:
      analytics-engine:
        condition: service_healthy
    
    labels:
      - "app=v7"
      - "service=backend"
      - "version=latest"
      - "protocols=grpc,grpc-web"

  # 🌐 前端服务 - nginx + SolidJS
  web:
    image: ${WEB_IMAGE:-ghcr.io/hellocplusplus0/v7/web:latest}
    container_name: v7-web
    restart: unless-stopped
    
    # 🔌 端口映射
    ports:
      - "80:3000"     # 主要 Web 端口
      - "8080:3000"   # 备用端口
    
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - TZ=Asia/Shanghai
      - NGINX_USER=root
      - NGINX_PORT=3000
      - NGINX_WORKER_PROCESSES=auto
      - NGINX_WORKER_CONNECTIONS=1024
      - NGINX_LOG_LEVEL=warn
      # gRPC-Web 配置
      - GRPC_WEB_ENDPOINT=http://backend:50053
    
    networks:
      - v7-network
    
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.1'
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /tmp:nosuid,size=50m
      - /var/run:nosuid,size=10m
    
    depends_on:
      backend:
        condition: service_healthy
    
    labels:
      - "app=v7"
      - "service=web"
      - "version=latest"

  # 📊 分析引擎 - 优化网络配置
  analytics-engine:
    build:
      context: ./analytics-engine
      dockerfile: Dockerfile
    image: v7-analytics-engine:latest
    container_name: v7-analytics-engine
    restart: unless-stopped
    
    # 🔌 端口配置
    expose:
      - "50051"  # 内部gRPC端口
    # ports:
    #   - "50051:50051"  # 仅在跨服务器部署时取消注释
    
    networks:
      - v7-network
    
    environment:
      - ANALYTICS_LISTEN_ADDR=0.0.0.0:50051
      - RUST_LOG=info
      - PYTHONPATH=/home/analytics/python
      # 性能优化配置
      - RAYON_NUM_THREADS=2
      - PYTHON_BRIDGE_THREADS=4
    
    volumes:
      - analytics-socket:/tmp/analytics:Z  # Unix Domain Socket
      - analytics-data:/home/analytics/data:Z  # 数据持久化
    
    healthcheck:
      test: ["CMD", "grpcurl", "-plaintext", "localhost:50051", "analytics.AnalyticsEngine/HealthCheck"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    
    labels:
      - "app=v7"
      - "service=analytics-engine"
      - "protocol=grpc"

# 🌐 网络配置
networks:
  v7-network:
    driver: bridge
    name: v7-network
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
    labels:
      - "app=v7"
      - "type=internal"

# 📁 数据卷配置
volumes:
  analytics-socket:
    driver: local
    labels:
      - "app=v7"
      - "type=socket"
  
  analytics-data:
    driver: local
    labels:
      - "app=v7"
      - "type=data" 