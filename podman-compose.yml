# 🚀 V7 Podman 轻量化部署配置
# 专为轻量级服务器(2核2G)优化的Podman Compose配置
version: '3.8'

services:
  # 🦀 后端服务 - Rust + FMOD v7 架构
  backend:
    image: ${BACKEND_IMAGE:-ghcr.io/hellocplusplus0/v7/backend:latest}
    container_name: v7-backend
    restart: unless-stopped
    
    # 🔌 端口映射
    ports:
      - "3000:3000"
    
    # 🌍 环境变量 - 修复数据库路径为持久化存储
    environment:
      - RUST_LOG=${RUST_LOG:-info}
      - DATABASE_URL=${DATABASE_URL:-sqlite:/app/data/prod.db}
      - PORT=3000
      - TZ=Asia/Shanghai
      - ENABLE_CORS=true
      - MAX_CONNECTIONS=100
      # Podman 特定优化
      - RUST_BACKTRACE=1
      - MALLOC_ARENA_MAX=2
    
    # 📁 数据卷映射 - 确保数据持久化和权限正确
    volumes:
      - ./data:/app/data:Z
      - ./logs/backend:/app/logs:Z
      - ./config:/app/config:ro,Z
    
    # 🌐 网络配置
    networks:
      - v7-network
    
    # 💾 资源限制 (针对2核2G服务器优化)
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.8'
        reservations:
          memory: 256M
          cpus: '0.2'
    
    # 🔒 健康检查
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    # 🔒 安全配置 - 保持基本安全但允许数据写入
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    
    # 🔧 用户配置 - 确保数据目录权限正确
    user: "1001:1001"
    
    # 🌐 日志配置
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    
    # 🏷️ 标签
    labels:
      - "app=v7"
      - "service=backend"
      - "version=latest"
      - "maintainer=hellocplusplus0"

  # 🌐 前端服务 - SolidJS + Web v7 架构
  web:
    image: ${WEB_IMAGE:-ghcr.io/hellocplusplus0/v7/web:latest}
    container_name: v7-web
    restart: unless-stopped
    
    # 🔌 端口映射 - 使用8080非特权端口
    ports:
      - "8080:8080"
    
    # 🌍 环境变量 - 支持动态配置
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - TZ=Asia/Shanghai
      # Nginx 配置环境变量
      - NGINX_USER=appuser
      - NGINX_PORT=8080
      - NGINX_WORKER_PROCESSES=auto
      - NGINX_WORKER_CONNECTIONS=1024
      - NGINX_LOG_LEVEL=warn
      - BACKEND_URL=http://backend:3000
    
    # 📁 数据卷映射 - 可选的日志挂载
    volumes:
      - ./logs/web:/var/log/nginx:Z
    
    # 🌐 网络配置
    networks:
      - v7-network
    
    # 💾 资源限制
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.1'
    
    # 🔒 健康检查 - 使用8080端口
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    
    # 🔒 安全配置 - 适合非特权容器
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /tmp:nosuid,size=50m
      - /var/run:nosuid,size=10m
    
    # 📦 服务依赖
    depends_on:
      backend:
        condition: service_healthy
    
    # 🏷️ 标签
    labels:
      - "app=v7"
      - "service=web"
      - "version=latest"
      - "maintainer=hellocplusplus0"

  # 📊 轻量级监控服务 (可选)
  monitor:
    image: prom/node-exporter:latest
    container_name: v7-monitor
    restart: unless-stopped
    
    # 🔌 端口映射
    ports:
      - "${MONITOR_PORT:-9100}:9100"
    
    # 📁 数据卷映射
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    
    # 🌍 环境变量
    environment:
      - NODE_ID={{.Node.ID}}
    
    # 🌐 网络配置
    networks:
      - v7-network
    
    # 💾 资源限制
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 64M
        reservations:
          cpus: '0.05'
          memory: 32M
    
    # 🔒 安全配置
    security_opt:
      - no-new-privileges:true
    read_only: true
    
    # 🏷️ 标签
    labels:
      - "app=v7"
      - "service=monitor"
      - "version=latest"
    
    # 启动参数
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    
    profiles:
      - monitoring

# 🌐 网络配置
networks:
  v7-network:
    driver: bridge
    name: v7-network
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
    labels:
      - "app=v7"
      - "type=internal"

# 📁 数据卷配置
volumes:
  v7-data:
    driver: local
    name: v7-data
    labels:
      - "app=v7"
      - "type=persistent"
  
  v7-logs:
    driver: local
    name: v7-logs
    labels:
      - "app=v7"
      - "type=logs"

# 🏷️ 全局标签
x-common-labels: &common-labels
  app: "v7"
  architecture: "podman"
  environment: "${NODE_ENV:-production}"
  maintainer: "hellocplusplus0"
  
# 📝 配置说明
# 
# 🚀 启动命令:
#   podman-compose up -d
# 
# 📊 查看状态:
#   podman-compose ps
#   podman-compose logs -f
# 
# 🔄 更新服务:
#   podman-compose pull
#   podman-compose up -d --force-recreate
# 
# 🛑 停止服务:
#   podman-compose down
# 
# 🧹 清理资源:
#   podman-compose down --volumes --remove-orphans
#   podman system prune -af
# 
# 📊 启用监控:
#   podman-compose --profile monitoring up -d
# 
# 🔧 资源优化说明:
# - 后端: 1核CPU, 512MB内存 (适合Rust高性能特性)
# - 前端: 0.5核CPU, 256MB内存 (Nginx轻量级)
# - 监控: 0.1核CPU, 64MB内存 (可选组件)
# - 总计: 1.6核CPU, 832MB内存 (预留系统资源)
# 
# 🔒 安全特性:
# - 非特权容器运行
# - SELinux标签支持
# - 临时文件系统隔离
# - 网络隔离
# - 环境变量配置
# 
# 🎯 最佳实践特性:
# - 非特权端口 (3000, 8080, 9100)
# - 环境变量驱动配置
# - 健康检查适配
# - 正确的依赖关系
# - 资源限制优化 