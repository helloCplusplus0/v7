# 🐳 V7 项目 - 生产环境容器编排（已针对Dockerfile优化调整）
# 架构：Web(nginx) + Backend(gRPC+gRPC-Web) + Analytics-Engine(gRPC)
# 通信：Browser → nginx → Backend gRPC-Web:50053
# 📋 优化亮点：参数化配置、增强安全、优化性能、企业级监控

# V7 Project - Backend + Web 容器化编排配置
# Analytics Engine 使用 systemd 部署，获得最佳性能
# 
# 🏭 架构设计：
#   Analytics Engine: systemd 服务 (localhost:50051)
#   Backend: 容器化 (ports: 3000/50053)  
#   Web: 容器化 (port: 8080)
#
# 🚀 使用方法：
#   1. 部署 Analytics Engine: cd analytics-engine && sudo -u analytics ./scripts/deploy.sh
#   2. 启动容器服务: podman-compose up -d
#   3. 验证服务: curl http://localhost:8080/health

version: '3.8'

# 🌐 网络配置
networks:
  v7-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# 📦 数据卷配置  
volumes:
  # Backend数据存储
  backend-data:
    driver: local
  backend-logs:
    driver: local
    
  # Web静态资源（如果需要持久化）
  web-cache:
    driver: local

# 🚀 服务配置
services:
  # 🦀 Backend 服务 - Rust FMOD v7 + gRPC
  backend:
    image: ${BACKEND_IMAGE:-v7-backend:latest}
    container_name: v7-backend
    restart: unless-stopped
    
    # 🌐 网络配置 - WireGuard VPN需要host网络模式
    # 使用host模式让容器直接访问主机网络栈(包括WireGuard接口)
    network_mode: host
    
    # 🔌 端口配置 - host模式下不需要端口映射
    # ports:
    #   - "${BACKEND_HTTP_PORT:-3000}:${BACKEND_HTTP_PORT:-3000}"   # HTTP API
    #   - "${BACKEND_GRPC_PORT:-50053}:${BACKEND_GRPC_PORT:-50053}" # gRPC API
    
    # 🌍 环境变量配置
    environment:
      # 基础配置
      - NODE_ENV=${NODE_ENV:-production}
      - RUST_LOG=${RUST_LOG:-info}
      - TZ=${TZ:-Asia/Shanghai}
      
      # 端口配置
      - HTTP_PORT=${BACKEND_HTTP_PORT:-3000}
      - GRPC_PORT=${BACKEND_GRPC_PORT:-50053}
      
      # Analytics Engine连接配置
      # 🔧 WireGuard VPN: host网络模式下可直接访问VPN接口
      # 开发环境: 本地直连
      # 生产环境: 通过WireGuard VPN (10.0.0.1是analytics-engine的VPN IP)
      - ANALYTICS_ENGINE_ENDPOINT=${ANALYTICS_ENGINE_ENDPOINT:-http://127.0.0.1:50051}
      
      # 数据库配置
      - DATABASE_URL=sqlite:/app/data/prod.db
      
      # 性能调优配置
      - MALLOC_ARENA_MAX=2
      - MALLOC_TRIM_THRESHOLD_=131072
    
    # 📁 数据卷挂载
    volumes:
      - backend-data:/app/data:Z
      - backend-logs:/app/logs:Z
      - /tmp:/tmp/app-runtime:Z
    
    # 🔒 安全配置
    user: "${BACKEND_UID:-1002}:${BACKEND_GID:-1002}"
    
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    
    # 📊 资源限制
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.25'
    
    # 🏥 健康检查（适配WireGuard VPN延迟）
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:${BACKEND_HTTP_PORT:-3000}/health || exit 1"]
      interval: 30s
      timeout: 15s    # 增加超时时间：VPN网络可能有额外延迟
      retries: 5      # 增加重试次数：应对VPN连接不稳定
      start_period: 45s  # 增加启动时间：等待VPN连接建立
    
    # 📝 日志配置
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    
    # 🏷️ 标签
    labels:
      - "app=v7"
      - "service=backend"
      - "version=optimized"
      - "protocol=http+grpc"
      - "architecture=rust+fmod-v7"

  # 🌐 Web 服务 - nginx + React/TypeScript
  web:
    image: ${WEB_IMAGE:-v7-web:latest}
    container_name: v7-web
    restart: unless-stopped
    
    # 🔌 端口配置
    ports:
      - "${WEB_PORT:-8080}:${WEB_PORT:-8080}"
    
    # 🌐 网络配置 - Web保持bridge模式(不需要VPN访问)
    networks:
      - v7-network
    
    # 🌍 环境变量配置
    environment:
      # 基础配置
      - NODE_ENV=${NODE_ENV:-production}
      - TZ=${TZ:-Asia/Shanghai}
      
      # Web配置
      - WEB_PORT=${WEB_PORT:-8080}
      
      # Backend连接配置
      - BACKEND_HTTP_URL=http://backend:${BACKEND_HTTP_PORT:-3000}
      - BACKEND_GRPC_URL=http://backend:${BACKEND_GRPC_PORT:-50053}
    
    # 📁 数据卷挂载（可选的缓存持久化）
    volumes:
      - web-cache:/var/cache/nginx:Z
    
    # 🔒 安全配置
    user: "${WEB_UID:-1001}:${WEB_GID:-1001}"
    
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /tmp:noexec,nosuid,size=50m
    
    # 📊 资源限制
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.1'
    
    # 🏥 健康检查
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:${WEB_PORT:-8080}/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    
    # 📝 日志配置
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    
    # 🏷️ 标签
    labels:
      - "app=v7"
      - "service=web"
      - "version=optimized"
      - "protocol=http"
      - "architecture=nginx+react"
    
    # 🔗 服务依赖（确保Backend先启动）
    depends_on:
      backend:
        condition: service_healthy

# 💾 命名数据卷配置
volumes:
  backend-data:
    driver: local
    # 🔧 修复：使用真实持久化存储，不是tmpfs内存文件系统
    labels:
      - "app=v7"
      - "service=backend"
      - "type=persistent-data"
  
  backend-logs:
    driver: local
    labels:
      - "app=v7" 
      - "service=backend"
      - "type=logs"
  
  web-cache:
    driver: local
    labels:
      - "app=v7"
      - "service=web"
      - "type=cache"

# 📊 分析引擎 - 支持容器化和systemd两种部署方式
# 
# 🏭 生产环境（推荐）：systemd独立进程部署
#   部署方式：cd analytics-engine && ./scripts/deploy.sh
#   服务管理：systemctl {start|stop|status} analytics-engine
#   Backend连接：ANALYTICS_ENGINE_ADDR=http://host.containers.internal:50051
# 
# 🧪 测试/开发环境：容器化部署（取消注释以下配置）
#   启用方式：设置环境变量 ENABLE_ANALYTICS_CONTAINER=true
#   Backend连接：ANALYTICS_ENGINE_ADDR=http://analytics-engine:50051
# 
# analytics-engine:
#     image: ${ANALYTICS_IMAGE:-v7-analytics-engine:latest}
#     container_name: v7-analytics-engine
#     restart: unless-stopped
#     
#     # 🔌 端口配置（参数化）
#     ports:
#       - "${ANALYTICS_PORT:-50051}:${ANALYTICS_PORT:-50051}"
#     
#     networks:
#       - v7-network
#     
#     environment:
#       - ANALYTICS_LISTEN_ADDR=0.0.0.0:${ANALYTICS_PORT:-50051}
#       - ANALYTICS_PORT=${ANALYTICS_PORT:-50051}
#       - RUST_LOG=${RUST_LOG:-info}
#       - PYTHONPATH=/home/analytics/python
#       # 性能优化配置（匹配Dockerfile优化）
#       - RAYON_NUM_THREADS=2
#       - PYTHON_BRIDGE_THREADS=4
#       - MALLOC_ARENA_MAX=2
#       - MALLOC_TRIM_THRESHOLD_=131072
#       # Python依赖锁定配置
#       - PYTHON_EXACT_VERSIONS=true
#       - REQUIREMENTS_LOCKED=true
#     
#     volumes:
#       - analytics-socket:/tmp/app-runtime:Z  # 匹配Dockerfile优化后的路径
#       - analytics-data:/home/analytics/data:Z
#       - analytics-logs:/home/analytics/logs:Z
#     
#     healthcheck:
#       test: ["CMD", "/home/analytics/analytics-engine", "--health-check"]  # 使用内建健康检查
#       interval: 30s
#       timeout: 10s
#       retries: 3
#       start_period: 15s  # 减少：优化后启动更快
#     
#     deploy:
#       resources:
#         limits:
#           memory: 768M  # 调整：静态链接后内存占用减少
#           cpus: '0.8'   # 调整：优化后性能提升
#         reservations:
#           memory: 384M  # 调整：减少内存预留
#           cpus: '0.3'
#     
#     # 使用非特权用户（匹配Dockerfile优化）
#     user: "${ANALYTICS_UID:-1001}:${ANALYTICS_GID:-1001}"
#     
#     security_opt:
#       - no-new-privileges:true
#     tmpfs:
#       - /tmp:noexec,nosuid,size=50m
#     
#     logging:
#       driver: json-file
#       options:
#         max-size: "10m"
#         max-file: "3"
#     
#     labels:
#       - "app=v7"
#       - "service=analytics-engine"
#       - "version=optimized"
#       - "architecture=rust+python+grpc"
#       - "optimization=static-binary+python-bridge"

# 🌐 网络配置（优化性能和简化复杂度）
# networks:
#   v7-network:
#     driver: bridge
#     name: v7-network
#     ipam:
#       driver: default
#       config:
#         - subnet: 172.20.0.0/16
#     driver_opts:
#       com.docker.network.bridge.name: v7-bridge
#       com.docker.network.driver.mtu: 1500
#       # 启用容器间直接通信优化
#       com.docker.network.bridge.enable_icc: "true"
#       com.docker.network.bridge.enable_ip_masquerade: "true"
#     labels:
#       - "app=v7"
#       - "type=internal"
#       - "version=optimized"

# 📁 数据卷配置（简化清理）
# volumes:
#   # 移除analytics相关volumes，因为现在使用systemd独立部署
#   # analytics-socket:
#   #   driver: local
#   #   driver_opts:
#   #     type: tmpfs
#   #     device: tmpfs
#   #     o: "size=100m,uid=${ANALYTICS_UID:-1001},gid=${ANALYTICS_GID:-1001}"
#   #   labels:
#   #     - "app=v7"
#   #     - "type=socket"
#   #     - "service=analytics-engine"
#   
#   # analytics-data:
#   #   driver: local
#   #   labels:
#   #     - "app=v7"
#   #     - "type=data"
#   #     - "service=analytics-engine"
#   
#   # analytics-logs:
#   #   driver: local
#   #   labels:
#   #     - "app=v7"
#   #     - "type=logs"
#   #     - "service=analytics-engine"
#   
#   # 保留Backend临时运行时卷（如果需要）
#   backend-runtime:
#     driver: local
#     driver_opts:
#       type: tmpfs
#       device: tmpfs
#       o: "size=100m,uid=${BACKEND_UID:-1002},gid=${BACKEND_GID:-1002}"
#     labels:
#       - "app=v7"
#       - "type=runtime"
#       - "service=backend" 