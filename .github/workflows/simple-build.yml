# 🚀 V7 简化构建流水线
# 专注于基本的镜像构建和推送功能，避免复杂的部署逻辑

name: Simple Build and Push

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ghcr.io/${{ github.repository_owner }}/v7

jobs:
  # 🔍 基础检查
  basic-checks:
    name: 基础检查
    runs-on: ubuntu-latest
    outputs:
      should-build: ${{ steps.check.outputs.should-build }}
      backend-tag: ${{ steps.tags.outputs.backend-tag }}
      web-tag: ${{ steps.tags.outputs.web-tag }}
      
    steps:
      - name: 📋 Checkout代码
        uses: actions/checkout@v4

      - name: 🔍 检查变更
        id: check
        run: |
          # 检查是否有代码变更需要构建
          if [[ "${{ github.event_name }}" == "push" ]]; then
            echo "should-build=true" >> $GITHUB_OUTPUT
            echo "✅ Push事件，需要构建"
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "should-build=false" >> $GITHUB_OUTPUT
            echo "ℹ️ PR事件，仅检查不构建"
          else
            echo "should-build=false" >> $GITHUB_OUTPUT
            echo "ℹ️ 其他事件，跳过构建"
          fi

      - name: 🏷️ 生成镜像标签
        id: tags
        run: |
          # 根据分支和事件类型生成标签
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            TAG="latest"
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            TAG="develop"
          else
            TAG="${{ github.ref_name }}"
          fi
          
          # 添加commit短码
          COMMIT_SHORT=$(echo "${{ github.sha }}" | cut -c1-8)
          
          echo "backend-tag=${{ env.IMAGE_PREFIX }}/backend:${TAG}" >> $GITHUB_OUTPUT
          echo "web-tag=${{ env.IMAGE_PREFIX }}/web:${TAG}" >> $GITHUB_OUTPUT
          
          echo "🏷️ 镜像标签:"
          echo "  Backend: ${{ env.IMAGE_PREFIX }}/backend:${TAG}"
          echo "  Web: ${{ env.IMAGE_PREFIX }}/web:${TAG}"
          echo "  Commit: ${COMMIT_SHORT}"

  # 🦀 Backend检查和构建
  backend:
    name: Backend构建
    runs-on: ubuntu-latest
    needs: basic-checks
    if: needs.basic-checks.outputs.should-build == 'true'
    
    steps:
      - name: 📋 Checkout代码
        uses: actions/checkout@v4

      - name: 🔧 设置Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 登录GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏗️ 构建和推送Backend镜像
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: |
            ${{ needs.basic-checks.outputs.backend-tag }}
            ${{ env.IMAGE_PREFIX }}/backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: 🔍 验证Backend镜像
        run: |
          echo "🔍 验证Backend镜像..."
          docker pull ${{ needs.basic-checks.outputs.backend-tag }}
          docker images | grep backend
          echo "✅ Backend镜像验证成功"

  # 🌐 Web检查和构建
  web:
    name: Web构建
    runs-on: ubuntu-latest
    needs: basic-checks
    if: needs.basic-checks.outputs.should-build == 'true'
    
    steps:
      - name: 📋 Checkout代码
        uses: actions/checkout@v4

      - name: 🔧 设置Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 登录GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏗️ 构建和推送Web镜像
        uses: docker/build-push-action@v5
        with:
          context: ./web
          file: ./web/Dockerfile
          push: true
          tags: |
            ${{ needs.basic-checks.outputs.web-tag }}
            ${{ env.IMAGE_PREFIX }}/web:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: 🔍 验证Web镜像
        run: |
          echo "🔍 验证Web镜像..."
          docker pull ${{ needs.basic-checks.outputs.web-tag }}
          docker images | grep web
          echo "✅ Web镜像验证成功"

  # 📊 构建总结
  build-summary:
    name: 构建总结
    runs-on: ubuntu-latest
    needs: [basic-checks, backend, web]
    if: always() && needs.basic-checks.outputs.should-build == 'true'
    
    steps:
      - name: 📊 生成构建报告
        run: |
          echo "🎉 V7镜像构建完成！"
          echo "================================"
          echo "🔧 构建信息:"
          echo "  事件: ${{ github.event_name }}"
          echo "  分支: ${{ github.ref_name }}"
          echo "  提交: ${{ github.sha }}"
          echo "  时间: $(date -u +%Y-%m-%dT%H:%M:%SZ)"
          echo ""
          echo "📦 构建镜像:"
          echo "  Backend: ${{ needs.basic-checks.outputs.backend-tag }}"
          echo "  Web: ${{ needs.basic-checks.outputs.web-tag }}"
          echo ""
          echo "🚀 部署命令："
          echo "curl -sSL https://raw.githubusercontent.com/${{ github.repository }}/main/scripts/remote-deploy.sh | bash -s -- \\"
          echo "  -B ${{ needs.basic-checks.outputs.backend-tag }} \\"
          echo "  -W ${{ needs.basic-checks.outputs.web-tag }}"
          echo ""
          echo "🔧 状态检查:"
          echo "  Backend: ${{ needs.backend.result }}"
          echo "  Web: ${{ needs.web.result }}"
          echo "================================"

      - name: ✅ 检查构建状态
        run: |
          if [[ "${{ needs.backend.result }}" != "success" ]]; then
            echo "❌ Backend构建失败"
            exit 1
          fi
          
          if [[ "${{ needs.web.result }}" != "success" ]]; then
            echo "❌ Web构建失败"
            exit 1
          fi
          
          echo "🎉 所有镜像构建成功！"

  # 💬 PR评论 (仅在PR时运行)
  pr-comment:
    name: PR评论
    runs-on: ubuntu-latest
    needs: [basic-checks, backend, web]
    if: github.event_name == 'pull_request' && always()
    
    steps:
      - name: 💬 创建PR评论
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            
            // 检查是否已存在构建报告评论
            const existingComment = comments.find(comment => 
              comment.body.includes('🚀 V7构建检查报告')
            );
            
            const reportBody = `## 🚀 V7构建检查报告
            
            ### 📋 检查结果
            - **Basic Checks**: ${{ needs.basic-checks.result }}
            - **Backend Build**: ${{ needs.backend.result || 'skipped' }}
            - **Web Build**: ${{ needs.web.result || 'skipped' }}
            
            ### 📦 构建信息
            - **分支**: \`${{ github.ref_name }}\`
            - **提交**: \`${{ github.sha }}\`
            - **触发事件**: ${{ github.event_name }}
            
            ### 🔧 后续操作
            ${needs.basic-checks.outputs.should-build == 'true' ? 
              '✅ 镜像已构建，合并后可用于部署' : 
              'ℹ️ 仅进行检查，未构建镜像'}
            
            ---
            *自动生成于 ${new Date().toISOString()}*`;
            
            if (existingComment) {
              // 更新现有评论
              await github.rest.issues.updateComment({
                comment_id: existingComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: reportBody
              });
            } else {
              // 创建新评论
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: reportBody
              });
            } 