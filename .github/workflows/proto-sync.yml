# 🚀 Proto文件同步和验证工作流
# 确保前后端proto定义始终保持同步，并检测breaking changes

name: Proto Sync and Validation

on:
  push:
    paths:
      - 'backend/proto/**'
      - 'web/buf.yaml'
      - 'web/buf.gen.yaml'
      - '.github/workflows/proto-sync.yml'
  pull_request:
    paths:
      - 'backend/proto/**'
      - 'web/buf.yaml'
      - 'web/buf.gen.yaml'

jobs:
  proto-validation:
    name: Proto文件验证和代码生成
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout代码
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 获取完整历史，用于breaking change检测
    
    - name: 🔧 设置Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: web/package-lock.json
    
    - name: 📦 安装依赖
      working-directory: web
      run: |
        npm ci
        npm install --save-dev @bufbuild/buf @bufbuild/protoc-gen-es @connectrpc/protoc-gen-connect-es
    
    - name: 🔍 验证proto文件语法
      working-directory: web
      run: |
        echo "🔍 验证proto文件语法..."
        npx buf lint
    
    - name: 🔄 检测Breaking Changes
      working-directory: web
      run: |
        echo "🔄 检测Breaking Changes..."
        # 检查是否有之前的提交进行比较
        if git rev-parse HEAD~1 >/dev/null 2>&1; then
          npx buf breaking --against '.git#branch=HEAD~1,subdir=backend/proto'
        else
          echo "ℹ️  首次提交，跳过breaking change检查"
        fi
    
    - name: 🎨 生成TypeScript代码
      working-directory: web
      run: |
        echo "🎨 生成TypeScript代码..."
        npx buf generate
    
    - name: 🔍 验证生成的代码
      working-directory: web
      run: |
        echo "🔍 验证生成的代码..."
        # 检查生成的文件是否存在
        if [ ! -f "src/generated/backend_pb.ts" ]; then
          echo "❌ backend_pb.ts 未生成"
          exit 1
        fi
        
        if [ ! -f "src/generated/backend_connect.ts" ]; then
          echo "❌ backend_connect.ts 未生成"
          exit 1
        fi
        
        # 运行TypeScript类型检查
        npm run type-check
    
    - name: 📊 生成报告
      working-directory: web
      run: |
        echo "📊 生成Proto同步报告..."
        
        # 创建报告目录
        mkdir -p ../reports
        
        # 生成报告
        cat > ../reports/proto-sync-report.md << 'EOF'
        # Proto文件同步报告
        
        ## 📋 验证结果
        
        - ✅ Proto文件语法检查通过
        - ✅ Breaking Change检测完成
        - ✅ TypeScript代码生成成功
        - ✅ 类型检查通过
        
        ## 📁 生成的文件
        
        - `src/generated/backend_pb.ts` - Proto消息类型定义
        - `src/generated/backend_connect.ts` - ConnectRPC服务定义
        
        ## 🔧 工具版本
        
        - Buf CLI: $(npx buf --version)
        - Node.js: $(node --version)
        - npm: $(npm --version)
        
        ## 📊 统计信息
        
        - 生成时间: $(date)
        - 提交哈希: ${{ github.sha }}
        - 分支: ${{ github.ref_name }}
        
        EOF
        
        echo "✅ 报告已生成"
    
    - name: 📤 上传生成的代码
      uses: actions/upload-artifact@v4
      with:
        name: generated-proto-code
        path: |
          web/src/generated/
          reports/
        retention-days: 30
    
    - name: 💬 PR评论 (仅限PR)
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // 读取报告文件
          const reportPath = path.join(process.cwd(), 'reports', 'proto-sync-report.md');
          const report = fs.readFileSync(reportPath, 'utf8');
          
          // 发布PR评论
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## 🚀 Proto文件同步结果\n\n${report}`
          });

  proto-format-check:
    name: Proto文件格式检查
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout代码
      uses: actions/checkout@v4
    
    - name: 🔧 设置Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: web/package-lock.json
    
    - name: 📦 安装Buf CLI
      working-directory: web
      run: |
        npm ci
        npm install --save-dev @bufbuild/buf
    
    - name: 🎨 检查proto文件格式
      working-directory: web
      run: |
        echo "🎨 检查proto文件格式..."
        
        # 格式化proto文件
        npx buf format --diff --exit-code
        
        if [ $? -eq 0 ]; then
          echo "✅ Proto文件格式正确"
        else
          echo "❌ Proto文件格式需要修复"
          echo "请运行: npx buf format -w"
          exit 1
        fi

  integration-test:
    name: 集成测试
    runs-on: ubuntu-latest
    needs: [proto-validation]
    
    steps:
    - name: 📥 Checkout代码
      uses: actions/checkout@v4
    
    - name: 🔧 设置Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: web/package-lock.json
    
    - name: 🦀 设置Rust
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: stable
    
    - name: 📦 安装前端依赖
      working-directory: web
      run: |
        npm ci
        npm install --save-dev @bufbuild/buf @bufbuild/protoc-gen-es @connectrpc/protoc-gen-connect-es
    
    - name: 🎨 生成proto代码
      working-directory: web
      run: npx buf generate
    
    - name: 🚀 启动后端服务
      working-directory: backend
      run: |
        # 在后台启动后端服务
        cargo run &
        BACKEND_PID=$!
        
        # 等待服务启动
        sleep 10
        
        # 检查服务是否正常运行
        if curl -f http://localhost:50053/health; then
          echo "✅ 后端服务启动成功"
        else
          echo "❌ 后端服务启动失败"
          kill $BACKEND_PID
          exit 1
        fi
        
        # 保存PID用于后续清理
        echo $BACKEND_PID > /tmp/backend.pid
    
    - name: 🧪 运行集成测试
      working-directory: web
      run: |
        # 构建前端
        npm run build
        
        # 运行类型检查
        npm run type-check
        
        # 运行测试
        npm test
    
    - name: 🧹 清理
      if: always()
      run: |
        # 停止后端服务
        if [ -f /tmp/backend.pid ]; then
          kill $(cat /tmp/backend.pid) || true
        fi 