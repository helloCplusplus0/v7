# 🚀 V7 Project CI/CD Pipeline - 混合架构部署
name: 🚀 V7 Hybrid Architecture CI/CD

on:
  push:
    branches: [ main, develop ]  # 支持main和develop分支
  pull_request:
    branches: [ main, develop ]  # 支持两个分支的PR

env:
  # 容器镜像配置
  REGISTRY: ghcr.io
  REGISTRY_USER_LOWER: ${{ github.repository_owner }}
  
  # 🐳 镜像地址配置
  BACKEND_IMAGE_BASE: ${{ vars.BACKEND_IMAGE || 'ghcr.io/your-org/v7/backend' }}
  WEB_IMAGE_BASE: ${{ vars.WEB_IMAGE || 'ghcr.io/your-org/v7/web' }}
  
  # Rust环境变量
  CARGO_INCREMENTAL: 0
  CARGO_PROFILE_DEV_DEBUG: 0
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: short
  CARGO_UNSTABLE_SPARSE_REGISTRY: true
  CARGO_REGISTRIES_CRATES_IO_PROTOCOL: sparse

jobs:
  # 🔍 环境验证
  environment-check:
    name: 🔍 Environment Check
    runs-on: ubuntu-latest
    outputs:
      deploy-ready: ${{ steps.deploy-check.outputs.deploy-ready }}
      backend-image: ${{ steps.images.outputs.backend-image }}
      web-image: ${{ steps.images.outputs.web-image }}
      auth-method: ${{ steps.auth-check.outputs.auth-method }}
      deployment-mode: ${{ steps.deployment-config.outputs.deployment-mode }}
    steps:
      - name: 📋 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔐 Authentication Check
        id: auth-check
        run: |
          echo "🔐 检查容器注册表认证..."
          
          AUTH_TOKEN=""
          AUTH_METHOD=""
          
          if [[ -n "${{ secrets.GHCR_TOKEN }}" ]]; then
            AUTH_TOKEN="${{ secrets.GHCR_TOKEN }}"
            AUTH_METHOD="GHCR_TOKEN"
            echo "✅ 使用 GHCR_TOKEN"
          elif [[ -n "${{ secrets.GITHUB_TOKEN }}" ]]; then
            AUTH_TOKEN="${{ secrets.GITHUB_TOKEN }}"
            AUTH_METHOD="GITHUB_TOKEN"
            echo "✅ 使用 GITHUB_TOKEN"
          else
            echo "❌ 无可用认证token"
            exit 1
          fi
          
          echo "auth-method=$AUTH_METHOD" >> $GITHUB_OUTPUT

      - name: 🏷️ Set Image Tags
        id: images
        run: |
          # 根据分支确定标签
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            TAG="latest"
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            TAG="develop"
          else
            TAG="${{ github.ref_name }}"
          fi
          
          # 构建镜像地址（确保小写）
          REGISTRY_USER_LOWER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          
          BACKEND_IMAGE="ghcr.io/${REGISTRY_USER_LOWER}/v7/backend:${TAG}"
          WEB_IMAGE="ghcr.io/${REGISTRY_USER_LOWER}/v7/web:${TAG}"
          
          echo "backend-image=${BACKEND_IMAGE}" >> $GITHUB_OUTPUT
          echo "web-image=${WEB_IMAGE}" >> $GITHUB_OUTPUT
          
          echo "🏷️ 镜像标签设置："
          echo "  Backend: ${BACKEND_IMAGE}"
          echo "  Web: ${WEB_IMAGE}"

      - name: 🔧 Deployment Configuration
        id: deployment-config
        run: |
          echo "🔧 配置部署模式..."
          
          # 根据分支确定部署模式
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            DEPLOYMENT_MODE="production"
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            DEPLOYMENT_MODE="staging"
          else
            DEPLOYMENT_MODE="review"
          fi
          
          echo "deployment-mode=${DEPLOYMENT_MODE}" >> $GITHUB_OUTPUT
          echo "🎯 部署模式: ${DEPLOYMENT_MODE}"

      - name: 🚀 Check Deployment Readiness
        id: deploy-check
        run: |
          echo "🔍 检查部署就绪状态..."
          DEPLOY_READY="false"
          
          # 仅在推送到main或develop分支时检查部署配置
          if [[ "${{ github.event_name }}" == "push" && ("${{ github.ref }}" == "refs/heads/main" || "${{ github.ref }}" == "refs/heads/develop") ]]; then
            # 检查生产环境部署配置
            if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
              if [[ -n "${{ secrets.PROD_SERVER_HOST }}" && -n "${{ secrets.PROD_SERVER_USER }}" && -n "${{ secrets.PROD_SSH_KEY }}" ]]; then
                DEPLOY_READY="true"
                echo "✅ 生产环境部署配置完整"
              else
                echo "❌ 生产环境部署配置不完整"
              fi
            # 检查预发布环境部署配置
            elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
              if [[ -n "${{ secrets.STAGING_SERVER_HOST }}" && -n "${{ secrets.STAGING_SERVER_USER }}" && -n "${{ secrets.STAGING_SSH_KEY }}" ]]; then
                DEPLOY_READY="true"
                echo "✅ 预发布环境部署配置完整"
              else
                echo "⚠️ 预发布环境部署配置不完整，跳过部署"
              fi
            fi
          else
            echo "ℹ️ 跳过部署配置检查（PR或非部署分支）"
          fi
          
          echo "deploy-ready=${DEPLOY_READY}" >> $GITHUB_OUTPUT

  # 🦀 Analytics Engine检查
  analytics-engine-check:
    name: 🦀 Analytics Engine Check
    runs-on: ubuntu-latest
    needs: environment-check
    
    steps:
      - name: 📋 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Rust Toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.87
          components: rustfmt, clippy

      - name: 📦 Cache Cargo Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            analytics-engine/target/
          key: ${{ runner.os }}-analytics-cargo-${{ hashFiles('analytics-engine/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-analytics-cargo-

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: ✏️ Format Check
        working-directory: analytics-engine
        run: |
          echo "🎨 检查Rust代码格式..."
          cargo fmt --all -- --check

      - name: 🔍 Clippy Check
        working-directory: analytics-engine
        run: |
          echo "🔍 运行Clippy代码检查..."
          cargo clippy --all-targets --all-features -- -D warnings

      - name: 🧪 Run Tests
        working-directory: analytics-engine
        run: |
          echo "🧪 运行测试..."
          # 安装Python依赖
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          
          # 运行Rust测试
          cargo test --verbose
          
          # 运行Python测试（如果存在）
          if [ -d python/tests ]; then
            cd python && python -m pytest tests/ -v
          fi

      - name: 🏗️ Build Check
        working-directory: analytics-engine
        run: |
          echo "🏗️ 构建检查..."
          ./scripts/build.sh
          
          # 验证二进制文件
          if [ -f target/release/analytics-server ]; then
            echo "✅ 构建成功: $(ls -lh target/release/analytics-server)"
            echo "🔍 文件类型: $(file target/release/analytics-server)"
          else
            echo "❌ 构建失败：二进制文件不存在"
            exit 1
          fi

  # 🦀 Backend检查
  backend-check:
    name: 🦀 Backend Check
    runs-on: ubuntu-latest
    needs: environment-check
    
    steps:
      - name: 📋 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Rust Toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.87
          components: rustfmt, clippy

      - name: 📦 Cache Cargo Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            backend/target/
          key: ${{ runner.os }}-backend-cargo-${{ hashFiles('backend/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-backend-cargo-

      - name: ✏️ Format Check
        working-directory: backend
        run: |
          echo "🎨 检查Rust代码格式..."
          cargo fmt --all -- --check

      - name: 🔍 Clippy Check
        working-directory: backend
        run: |
          echo "🔍 运行Clippy代码检查..."
          cargo clippy --all-targets --all-features -- -D warnings

      - name: 🧪 Run Tests
        working-directory: backend
        run: |
          echo "🧪 运行测试..."
          cargo test --verbose

      - name: 🏗️ Build Check
        working-directory: backend
        run: |
          echo "🏗️ 构建检查..."
          cargo build --release
          
          # 验证二进制文件
          if [ -f target/release/fmod_slice ]; then
            echo "✅ 构建成功: $(ls -lh target/release/fmod_slice)"
          else
            echo "❌ 构建失败：二进制文件不存在"
            exit 1
          fi

  # 🌐 Frontend检查
  frontend-check:
    name: 🌐 Frontend Check
    runs-on: ubuntu-latest
    needs: environment-check
    
    steps:
      - name: 📋 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: web/package-lock.json

      - name: 📦 Install Dependencies
        working-directory: web
        run: |
          echo "📦 安装依赖..."
          npm ci

      - name: ✏️ Format & Lint Check
        working-directory: web
        run: |
          echo "🎨 代码格式检查..."
          npm run format:check || echo "⚠️ 格式检查失败，但继续构建"
          
          echo "🔍 ESLint检查..."
          npm run lint || echo "⚠️ Lint检查失败，但继续构建"

      - name: 🏗️ Build Check
        working-directory: web
        run: |
          echo "🏗️ 构建检查..."
          npm run build
          
          # 验证构建产物
          if [ -d dist ]; then
            echo "✅ 构建成功"
            echo "📊 构建产物大小："
            du -sh dist/*
          else
            echo "❌ 构建失败：dist目录不存在"
            exit 1
          fi

      - name: 🧪 Run Tests
        working-directory: web
        run: |
          echo "🧪 运行测试..."
          npm test -- --run || echo "⚠️ 测试失败，但继续流程"

  # 🐳 容器构建和推送
  build-and-push:
    name: 🐳 Build & Push Containers
    runs-on: ubuntu-latest
    needs: [environment-check, backend-check, frontend-check]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
      - name: 📋 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🦀 Build and Push Backend
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ needs.environment-check.outputs.backend-image }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: 🌐 Build and Push Web
        uses: docker/build-push-action@v5
        with:
          context: ./web
          file: ./web/Dockerfile
          push: true
          tags: ${{ needs.environment-check.outputs.web-image }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: 🔍 Verify Images
        run: |
          echo "🔍 验证推送的镜像..."
          docker pull ${{ needs.environment-check.outputs.backend-image }}
          docker pull ${{ needs.environment-check.outputs.web-image }}
          
          echo "✅ 镜像推送成功："
          echo "  Backend: ${{ needs.environment-check.outputs.backend-image }}"
          echo "  Web: ${{ needs.environment-check.outputs.web-image }}"

  # 🚀 生产环境部署
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [environment-check, analytics-engine-check, build-and-push]
    if: github.ref == 'refs/heads/main' && needs.environment-check.outputs.deploy-ready == 'true'
    environment: production
    
    steps:
      - name: 📋 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Setup SSH
        run: |
          echo "🔧 配置SSH连接..."
          mkdir -p ~/.ssh
          echo "${{ secrets.PROD_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.PROD_SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: 📦 Upload Deployment Scripts
        run: |
          echo "📦 上传部署脚本..."
          scp -r scripts analytics-engine/scripts backend/Dockerfile web/Dockerfile compose.env.example podman-compose.yml \
            ${{ secrets.PROD_SERVER_USER }}@${{ secrets.PROD_SERVER_HOST }}:/tmp/v7-deploy/

      - name: 🦀 Deploy Analytics Engine
        run: |
          echo "🦀 部署Analytics Engine (systemd)..."
          ssh ${{ secrets.PROD_SERVER_USER }}@${{ secrets.PROD_SERVER_HOST }} << 'EOF'
            cd /tmp/v7-deploy
            
            # 1. 构建Analytics Engine
            cd analytics-engine
            echo "🏗️ 构建Analytics Engine..."
            ./scripts/build.sh
            
            # 2. 停止现有服务
            echo "🛑 停止现有Analytics Engine服务..."
            sudo systemctl stop analytics-engine 2>/dev/null || true
            
            # 3. 部署新版本
            echo "🚀 部署Analytics Engine..."
            sudo -u analytics ./scripts/deploy.sh --enable-remote
            
            # 4. 验证服务
            echo "🔍 验证Analytics Engine..."
            sleep 10
            if systemctl is-active --quiet analytics-engine; then
              echo "✅ Analytics Engine启动成功"
              # 测试gRPC连接
              if command -v grpcurl &> /dev/null; then
                grpcurl -plaintext localhost:50051 analytics.AnalyticsEngine/HealthCheck
              fi
            else
              echo "❌ Analytics Engine启动失败"
              sudo journalctl -u analytics-engine --no-pager -n 20
              exit 1
            fi
          EOF

      - name: 🐳 Deploy Backend and Web Containers
        run: |
          echo "🐳 部署Backend和Web容器..."
          ssh ${{ secrets.PROD_SERVER_USER }}@${{ secrets.PROD_SERVER_HOST }} << 'EOF'
            cd /tmp/v7-deploy
            
            # 1. 设置环境变量
            echo "🔧 配置环境变量..."
            cat > .env << ENVEOF
            # Analytics Engine连接（容器访问宿主机）
            ANALYTICS_ENGINE_ADDR=http://host.containers.internal:50051
            
            # Backend配置
            BACKEND_IMAGE=${{ needs.environment-check.outputs.backend-image }}
            BACKEND_HTTP_PORT=3000
            BACKEND_GRPC_PORT=50053
            
            # Web配置
            WEB_IMAGE=${{ needs.environment-check.outputs.web-image }}
            WEB_PORT=8080
            
            # 环境
            NODE_ENV=production
            RUST_LOG=info
            ENVEOF
            
            # 2. 停止现有容器
            echo "🛑 停止现有容器..."
            podman-compose down || true
            
            # 3. 拉取最新镜像
            echo "📦 拉取容器镜像..."
            podman pull ${{ needs.environment-check.outputs.backend-image }}
            podman pull ${{ needs.environment-check.outputs.web-image }}
            
            # 4. 启动容器服务
            echo "🚀 启动容器服务..."
            podman-compose up -d
            
            # 5. 等待服务就绪
            echo "⏳ 等待服务就绪..."
            sleep 30
            
            # 6. 验证容器状态
            echo "🔍 验证容器状态..."
            podman-compose ps
            
            # 7. 健康检查
            echo "🏥 执行健康检查..."
            
            # Backend健康检查
            for i in {1..5}; do
              if curl -f http://localhost:3000/health; then
                echo "✅ Backend健康检查通过"
                break
              else
                echo "⏳ Backend健康检查失败，重试 $i/5..."
                sleep 10
              fi
              if [ $i -eq 5 ]; then
                echo "❌ Backend健康检查最终失败"
                podman logs v7-backend
                exit 1
              fi
            done
            
            # Web健康检查
            for i in {1..5}; do
              if curl -f http://localhost:8080/health; then
                echo "✅ Web健康检查通过"
                break
              else
                echo "⏳ Web健康检查失败，重试 $i/5..."
                sleep 10
              fi
              if [ $i -eq 5 ]; then
                echo "❌ Web健康检查最终失败"
                podman logs v7-web
                exit 1
              fi
            done
          EOF

      - name: 🔍 End-to-End Verification
        run: |
          echo "🔍 端到端验证..."
          ssh ${{ secrets.PROD_SERVER_USER }}@${{ secrets.PROD_SERVER_HOST }} << 'EOF'
            echo "🔗 测试完整链路通信..."
            
            # 测试Web -> Backend -> Analytics通信链
            echo "1. 测试Web静态资源..."
            curl -f http://localhost:8080/ > /dev/null && echo "✅ Web静态资源正常" || echo "❌ Web静态资源异常"
            
            echo "2. 测试Backend API..."
            curl -f http://localhost:8080/api/health > /dev/null && echo "✅ Backend API正常" || echo "❌ Backend API异常"
            
            echo "3. 测试Analytics Engine集成..."
            # 通过Backend代理测试Analytics Engine
            if curl -f -X POST http://localhost:8080/api/analytics -H "Content-Type: application/json" -d '{"algorithm":"mean","data":[1,2,3,4,5]}' > /dev/null; then
              echo "✅ Analytics Engine集成正常"
            else
              echo "⚠️ Analytics Engine集成可能异常"
            fi
            
            echo "📊 系统资源使用："
            echo "CPU和内存："
            top -bn1 | head -n 5
            echo "容器资源："
            podman stats --no-stream --format "table {{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}"
          EOF

      - name: 📊 Deployment Summary
        run: |
          echo "🎉 生产环境部署完成！"
          echo "================================"
          echo "🎯 架构模式: 混合部署"
          echo "🦀 Analytics Engine: systemd (原生性能)"
          echo "🐳 Backend + Web: 容器化 (标准化运维)"
          echo ""
          echo "🌐 访问地址："
          echo "  - 前端应用: http://${{ secrets.PROD_SERVER_HOST }}:8080"
          echo "  - 后端API: http://${{ secrets.PROD_SERVER_HOST }}:3000"
          echo "  - Analytics: localhost:50051 (服务器内部)"
          echo ""
          echo "🔍 健康检查："
          echo "  - Web: http://${{ secrets.PROD_SERVER_HOST }}:8080/health"
          echo "  - Backend: http://${{ secrets.PROD_SERVER_HOST }}:3000/health"
          echo ""
          echo "📊 部署信息："
          echo "  - 时间: $(date -u +%Y-%m-%dT%H:%M:%SZ)"
          echo "  - 版本: ${{ github.sha }}"
          echo "  - Backend镜像: ${{ needs.environment-check.outputs.backend-image }}"
          echo "  - Web镜像: ${{ needs.environment-check.outputs.web-image }}"

  # 🧪 预发布环境部署
  deploy-staging:
    name: 🧪 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [environment-check, analytics-engine-check, build-and-push]
    if: github.ref == 'refs/heads/develop' && needs.environment-check.outputs.deploy-ready == 'true'
    environment: staging
    
    steps:
      - name: 📋 Checkout Repository
        uses: actions/checkout@v4

      - name: 🧪 Staging Deployment
        run: |
          echo "🧪 预发布环境部署..."
          echo "🏷️ 版本: ${{ needs.environment-check.outputs.backend-image }}"
          echo "📝 注意：预发布环境部署逻辑与生产环境类似"
          echo "💡 使用 STAGING_* 前缀的secrets配置预发布服务器"
          
          # 可以复制生产环境的部署逻辑，使用不同的服务器配置
          # 例如：STAGING_SERVER_HOST, STAGING_SERVER_USER, STAGING_SSH_KEY

  # 📊 工作流总结
  workflow-summary:
    name: 📊 Workflow Summary
    runs-on: ubuntu-latest
    needs: [environment-check, analytics-engine-check, backend-check, frontend-check, build-and-push, deploy-production, deploy-staging]
    if: always()
    
    steps:
      - name: 📊 CI/CD Pipeline Summary
        run: |
          echo "🔍 V7混合架构CI/CD流水线总结"
          echo "========================================"
          echo "🔧 环境检查: ${{ needs.environment-check.result }}"
          echo "🦀 Analytics Engine: ${{ needs.analytics-engine-check.result }}"
          echo "🦀 Backend检查: ${{ needs.backend-check.result }}"
          echo "🌐 Frontend检查: ${{ needs.frontend-check.result }}"
          echo "🐳 容器构建: ${{ needs.build-and-push.result }}"
          echo "🚀 生产部署: ${{ needs.deploy-production.result }}"
          echo "🧪 预发布部署: ${{ needs.deploy-staging.result }}"
          echo "========================================"
          
          # 计算整体状态
          OVERALL_STATUS="success"
          
          # 检查必需的步骤
          if [[ "${{ needs.environment-check.result }}" != "success" ]]; then
            OVERALL_STATUS="failed"
            echo "❌ 环境检查失败"
          fi
          
          if [[ "${{ needs.analytics-engine-check.result }}" != "success" ]]; then
            OVERALL_STATUS="failed"
            echo "❌ Analytics Engine检查失败"
          fi
          
          if [[ "${{ needs.backend-check.result }}" != "success" ]]; then
            OVERALL_STATUS="failed"
            echo "❌ Backend检查失败"
          fi
          
          if [[ "${{ needs.frontend-check.result }}" != "success" ]]; then
            OVERALL_STATUS="failed"
            echo "❌ Frontend检查失败"
          fi
          
          # 对于main分支，检查部署状态
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            if [[ "${{ needs.build-and-push.result }}" != "success" ]]; then
              OVERALL_STATUS="failed"
              echo "❌ 容器构建失败"
            fi
            
            if [[ "${{ needs.deploy-production.result }}" != "success" ]]; then
              OVERALL_STATUS="failed"
              echo "❌ 生产部署失败"
            fi
          fi
          
          if [[ "$OVERALL_STATUS" == "success" ]]; then
            echo "🎉 CI/CD流水线执行成功！"
            
            if [[ "${{ github.ref }}" == "refs/heads/main" && "${{ needs.deploy-production.result }}" == "success" ]]; then
              echo ""
              echo "🌐 生产环境访问地址："
              echo "  - 应用入口: http://${{ secrets.PROD_SERVER_HOST }}:8080"
              echo "  - API接口: http://${{ secrets.PROD_SERVER_HOST }}:3000"
              echo ""
              echo "🏗️ 架构特点："
              echo "  ✅ Analytics Engine: systemd部署，极致性能"
              echo "  ✅ Backend + Web: 容器化部署，标准化运维"
              echo "  ✅ 混合架构: 平衡性能和可维护性"
            fi
          else
            echo "❌ CI/CD流水线执行失败，请检查上述步骤"
            exit 1
          fi

      - name: 📝 Next Steps
        if: success()
        run: |
          echo "📝 后续操作指南："
          echo "========================================"
          
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "📋 PR检查完成，等待合并"
            echo "  - 所有检查通过，可以安全合并"
            echo "  - 合并到main分支将触发生产部署"
            
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "🎉 生产环境部署完成"
            echo "  - 应用已在生产环境运行"
            echo "  - 监控服务状态和性能指标"
            echo "  - 如有问题，可回滚到上个版本"
            
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "🧪 开发分支更新完成"
            echo "  - 可以在预发布环境测试新功能"
            echo "  - 测试通过后合并到main分支"
          fi
          
          echo ""
          echo "🔗 相关链接："
          echo "  - 项目文档: README.md"
          echo "  - 部署指南: scripts/DEPLOYMENT_GUIDE.md"
          echo "  - 架构说明: docs/architecture.md" 