# 🚀 V7 Project CI/CD Pipeline
name: 🚀 V7 Project CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deploy_env:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  REGISTRY: ghcr.io
  IMAGE_BACKEND: ghcr.io/${{ github.repository_owner }}/v7/backend
  IMAGE_WEB: ghcr.io/${{ github.repository_owner }}/v7/web

jobs:
  # 🧪 并行测试阶段
  test-backend:
    name: 🦀 Backend Tests
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🦀 Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: 📦 Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: backend

      - name: 🔍 Run backend tests
        working-directory: backend
        run: |
          cargo fmt --all -- --check
          cargo clippy -- -D warnings
          cargo test --verbose

  test-frontend:
    name: 🌐 Frontend Tests
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: web/package-lock.json

      - name: 📦 Install dependencies
        working-directory: web
        run: npm ci

      - name: 🧪 Run frontend tests
        working-directory: web
        run: |
          npm run test:ci
          npm run build

      - name: 📊 Upload test coverage
        uses: codecov/codecov-action@v3
        with:
          directory: web/coverage

  # 🐳 镜像构建阶段
  build-images:
    name: 🐳 Build Container Images
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    outputs:
      backend-digest: ${{ steps.backend-build.outputs.digest }}
      web-digest: ${{ steps.web-build.outputs.digest }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 📝 Extract metadata for backend
        id: backend-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_BACKEND }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🏗️ Build and push backend image
        id: backend-build
        uses: docker/build-push-action@v5
        with:
          context: backend
          file: backend/Dockerfile
          push: true
          tags: ${{ steps.backend-meta.outputs.tags }}
          labels: ${{ steps.backend-meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 📝 Extract metadata for web
        id: web-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_WEB }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🏗️ Build and push web image
        id: web-build
        uses: docker/build-push-action@v5
        with:
          context: web
          file: web/Dockerfile
          push: true
          tags: ${{ steps.web-meta.outputs.tags }}
          labels: ${{ steps.web-meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # 🚀 部署阶段
  deploy:
    name: 🚀 Deploy to Server
    runs-on: ubuntu-latest
    needs: build-images
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    environment: ${{ github.event.inputs.deploy_env || 'staging' }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Setup SSH key
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SERVER_SSH_KEY }}

      - name: 📋 Prepare deployment files
        run: |
          # 创建部署配置
          envsubst < podman-compose.yml > deploy-compose.yml
          
          # 创建环境变量文件
          cat > .env << EOF
          BACKEND_IMAGE=${{ env.IMAGE_BACKEND }}:latest
          WEB_IMAGE=${{ env.IMAGE_WEB }}:latest
          DATABASE_URL=${{ secrets.DATABASE_URL }}
          RUST_LOG=${{ secrets.RUST_LOG }}
          NODE_ENV=${{ secrets.NODE_ENV }}
          EOF
        env:
          BACKEND_IMAGE: ${{ env.IMAGE_BACKEND }}
          WEB_IMAGE: ${{ env.IMAGE_WEB }}

      - name: 📤 Copy files to server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} \
            "mkdir -p ${{ secrets.DEPLOY_PATH }}"
          
          scp -o StrictHostKeyChecking=no deploy-compose.yml .env \
            ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:${{ secrets.DEPLOY_PATH }}/

      - name: 🚀 Deploy services
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
            cd ${{ secrets.DEPLOY_PATH }}
            
            # 拉取最新镜像
            podman-compose pull
            
            # 停止旧服务
            podman-compose down || true
            
            # 启动新服务
            podman-compose up -d
            
            # 等待服务启动
            sleep 30
            
            # 检查服务状态
            podman-compose ps
            
            # 健康检查
            for i in {1..30}; do
              if curl -f http://localhost:8080/health >/dev/null 2>&1; then
                echo "✅ Web service is healthy"
                break
              fi
              echo "⏳ Waiting for web service... ($i/30)"
              sleep 10
            done
            
            if curl -f http://localhost:3000/health >/dev/null 2>&1; then
              echo "✅ Backend service is healthy"
            else
              echo "❌ Backend service health check failed"
              exit 1
            fi
          EOF

      - name: 🧹 Cleanup old images
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
            # 清理未使用的镜像，保留最近3个版本
            podman image prune -f
            podman images | grep '${{ env.IMAGE_BACKEND }}\|${{ env.IMAGE_WEB }}' | tail -n +4 | awk '{print $3}' | xargs -r podman rmi
          EOF

  # 📊 部署后验证
  post-deploy-tests:
    name: 📊 Post-deployment Tests
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    steps:
      - name: 🔍 API Health Check
        run: |
          # 等待服务完全启动
          sleep 60
          
          # 检查后端API
          response=$(curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.SERVER_HOST }}:3000/health)
          if [ $response -eq 200 ]; then
            echo "✅ Backend API is responding"
          else
            echo "❌ Backend API health check failed (HTTP $response)"
            exit 1
          fi
          
          # 检查前端
          response=$(curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.SERVER_HOST }}:8080/health)
          if [ $response -eq 200 ]; then
            echo "✅ Frontend is responding"
          else
            echo "❌ Frontend health check failed (HTTP $response)"
            exit 1
          fi

      - name: 🧪 Smoke Tests
        run: |
          # MVP CRUD API测试
          echo "🧪 Testing MVP CRUD API..."
          
          # 测试获取项目列表
          response=$(curl -s "http://${{ secrets.SERVER_HOST }}:3000/api/items")
          echo "Items API response: $response"
          
          # 测试健康检查端点
          curl -f "http://${{ secrets.SERVER_HOST }}:3000/health" || exit 1
          curl -f "http://${{ secrets.SERVER_HOST }}:8080/health" || exit 1
          
          echo "✅ All smoke tests passed"

  # 📧 通知阶段
  notify:
    name: 📧 Deployment Notification
    runs-on: ubuntu-latest
    needs: [deploy, post-deploy-tests]
    if: always()
    steps:
      - name: 📧 Notify deployment result
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
        if: env.SLACK_WEBHOOK_URL != '' 