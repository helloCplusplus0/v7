// This file is @generated by prost-build.
/// 健康检查消息
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HealthRequest {
    #[prost(string, tag = "1")]
    pub service: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HealthResponse {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub version: ::prost::alloc::string::String,
    #[prost(int64, tag = "3")]
    pub timestamp: i64,
}
/// ===== 认证相关消息 =====
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LoginRequest {
    #[prost(string, tag = "1")]
    pub username: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub password: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LoginResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
    #[prost(string, tag = "2")]
    pub error: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub session: ::core::option::Option<UserSession>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UserSession {
    #[prost(string, tag = "1")]
    pub token: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub user_id: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub username: ::prost::alloc::string::String,
    #[prost(int64, tag = "4")]
    pub expires_at: i64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ValidateTokenRequest {
    #[prost(string, tag = "1")]
    pub token: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ValidateTokenResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
    #[prost(string, tag = "2")]
    pub error: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub session: ::core::option::Option<UserSession>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LogoutRequest {
    #[prost(string, tag = "1")]
    pub token: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LogoutResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
    #[prost(string, tag = "2")]
    pub error: ::prost::alloc::string::String,
}
/// ===== CRUD相关消息 =====
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateItemRequest {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "2")]
    pub description: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, tag = "3")]
    pub value: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateItemResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
    #[prost(string, tag = "2")]
    pub error: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub item: ::core::option::Option<Item>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetItemRequest {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetItemResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
    #[prost(string, tag = "2")]
    pub error: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub item: ::core::option::Option<Item>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateItemRequest {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "2")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub description: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "4")]
    pub value: ::core::option::Option<i32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateItemResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
    #[prost(string, tag = "2")]
    pub error: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub item: ::core::option::Option<Item>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteItemRequest {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteItemResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
    #[prost(string, tag = "2")]
    pub error: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListItemsRequest {
    #[prost(int32, optional, tag = "1")]
    pub limit: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub offset: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "3")]
    pub search: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListItemsResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
    #[prost(string, tag = "2")]
    pub error: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub items: ::prost::alloc::vec::Vec<Item>,
    #[prost(int32, tag = "4")]
    pub total: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Item {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "3")]
    pub description: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, tag = "4")]
    pub value: i32,
    #[prost(string, tag = "5")]
    pub created_at: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub updated_at: ::prost::alloc::string::String,
}
/// 分析引擎代理消息
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AnalyticsProxyRequest {
    #[prost(string, tag = "1")]
    pub algorithm: ::prost::alloc::string::String,
    #[prost(double, repeated, tag = "2")]
    pub data: ::prost::alloc::vec::Vec<f64>,
    #[prost(map = "string, string", tag = "3")]
    pub parameters: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AnalyticsProxyResponse {
    /// JSON格式结果
    #[prost(string, tag = "1")]
    pub result: ::prost::alloc::string::String,
    #[prost(bool, tag = "2")]
    pub success: bool,
    #[prost(string, tag = "3")]
    pub error: ::prost::alloc::string::String,
    #[prost(map = "string, double", tag = "4")]
    pub metrics: ::std::collections::HashMap<::prost::alloc::string::String, f64>,
}
/// MVP统计分析消息
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StatisticsRequest {
    #[prost(oneof = "statistics_request::RequestType", tags = "1, 2, 3")]
    pub request_type: ::core::option::Option<statistics_request::RequestType>,
}
/// Nested message and enum types in `StatisticsRequest`.
pub mod statistics_request {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum RequestType {
        #[prost(message, tag = "1")]
        GenerateData(super::GenerateRandomDataRequest),
        #[prost(message, tag = "2")]
        CalculateStats(super::CalculateStatisticsRequest),
        #[prost(message, tag = "3")]
        Comprehensive(super::ComprehensiveAnalysisRequest),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StatisticsResponse {
    #[prost(bool, tag = "4")]
    pub success: bool,
    #[prost(string, tag = "5")]
    pub error: ::prost::alloc::string::String,
    #[prost(oneof = "statistics_response::ResponseType", tags = "1, 2, 3")]
    pub response_type: ::core::option::Option<statistics_response::ResponseType>,
}
/// Nested message and enum types in `StatisticsResponse`.
pub mod statistics_response {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum ResponseType {
        #[prost(message, tag = "1")]
        DataResponse(super::GenerateRandomDataResponse),
        #[prost(message, tag = "2")]
        StatsResponse(super::CalculateStatisticsResponse),
        #[prost(message, tag = "3")]
        ComprehensiveResponse(super::ComprehensiveAnalysisResponse),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GenerateRandomDataRequest {
    #[prost(uint32, optional, tag = "1")]
    pub count: ::core::option::Option<u32>,
    #[prost(uint64, optional, tag = "2")]
    pub seed: ::core::option::Option<u64>,
    #[prost(double, optional, tag = "3")]
    pub min_value: ::core::option::Option<f64>,
    #[prost(double, optional, tag = "4")]
    pub max_value: ::core::option::Option<f64>,
    #[prost(string, optional, tag = "5")]
    pub distribution: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GenerateRandomDataResponse {
    #[prost(double, repeated, tag = "1")]
    pub data: ::prost::alloc::vec::Vec<f64>,
    #[prost(uint32, tag = "2")]
    pub count: u32,
    #[prost(uint64, tag = "3")]
    pub seed: u64,
    #[prost(string, tag = "4")]
    pub generated_at: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "5")]
    pub performance: ::core::option::Option<PerformanceInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CalculateStatisticsRequest {
    #[prost(double, repeated, tag = "1")]
    pub data: ::prost::alloc::vec::Vec<f64>,
    #[prost(string, repeated, tag = "2")]
    pub statistics: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(double, repeated, tag = "3")]
    pub percentiles: ::prost::alloc::vec::Vec<f64>,
    #[prost(bool, optional, tag = "4")]
    pub use_analytics_engine: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "5")]
    pub prefer_rust: ::core::option::Option<bool>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CalculateStatisticsResponse {
    #[prost(message, optional, tag = "1")]
    pub results: ::core::option::Option<StatisticsResult>,
    #[prost(message, optional, tag = "2")]
    pub performance: ::core::option::Option<PerformanceInfo>,
    #[prost(string, tag = "3")]
    pub implementation: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ComprehensiveAnalysisRequest {
    #[prost(message, optional, tag = "1")]
    pub data_config: ::core::option::Option<GenerateRandomDataRequest>,
    #[prost(message, optional, tag = "2")]
    pub stats_config: ::core::option::Option<CalculateStatisticsRequest>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ComprehensiveAnalysisResponse {
    #[prost(message, optional, tag = "1")]
    pub data_summary: ::core::option::Option<DataSummary>,
    #[prost(message, optional, tag = "2")]
    pub statistics: ::core::option::Option<StatisticsResult>,
    #[prost(message, optional, tag = "3")]
    pub performance: ::core::option::Option<PerformanceInfo>,
    #[prost(string, tag = "4")]
    pub analyzed_at: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DataSummary {
    #[prost(uint32, tag = "1")]
    pub count: u32,
    #[prost(uint64, tag = "2")]
    pub seed: u64,
    #[prost(message, optional, tag = "3")]
    pub range: ::core::option::Option<DataRange>,
    #[prost(string, tag = "4")]
    pub distribution: ::prost::alloc::string::String,
    #[prost(double, repeated, tag = "5")]
    pub preview: ::prost::alloc::vec::Vec<f64>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DataRange {
    #[prost(double, tag = "1")]
    pub min: f64,
    #[prost(double, tag = "2")]
    pub max: f64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StatisticsResult {
    #[prost(message, optional, tag = "1")]
    pub basic: ::core::option::Option<BasicStatistics>,
    #[prost(message, optional, tag = "2")]
    pub distribution: ::core::option::Option<DistributionStatistics>,
    #[prost(message, optional, tag = "3")]
    pub percentiles: ::core::option::Option<PercentileInfo>,
    #[prost(message, optional, tag = "4")]
    pub shape: ::core::option::Option<ShapeStatistics>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BasicStatistics {
    #[prost(uint32, tag = "1")]
    pub count: u32,
    #[prost(double, tag = "2")]
    pub sum: f64,
    #[prost(double, tag = "3")]
    pub mean: f64,
    #[prost(double, tag = "4")]
    pub min: f64,
    #[prost(double, tag = "5")]
    pub max: f64,
    #[prost(double, tag = "6")]
    pub range: f64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DistributionStatistics {
    #[prost(double, tag = "1")]
    pub median: f64,
    #[prost(double, repeated, tag = "2")]
    pub mode: ::prost::alloc::vec::Vec<f64>,
    #[prost(double, tag = "3")]
    pub variance: f64,
    #[prost(double, tag = "4")]
    pub std_dev: f64,
    #[prost(double, tag = "5")]
    pub iqr: f64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PercentileInfo {
    #[prost(double, tag = "1")]
    pub q1: f64,
    #[prost(double, tag = "2")]
    pub q2: f64,
    #[prost(double, tag = "3")]
    pub q3: f64,
    #[prost(map = "string, double", tag = "4")]
    pub custom: ::std::collections::HashMap<::prost::alloc::string::String, f64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ShapeStatistics {
    #[prost(double, tag = "1")]
    pub skewness: f64,
    #[prost(double, tag = "2")]
    pub kurtosis: f64,
    #[prost(string, tag = "3")]
    pub distribution_shape: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PerformanceInfo {
    #[prost(uint64, tag = "1")]
    pub execution_time_ms: u64,
    #[prost(uint64, optional, tag = "2")]
    pub memory_usage_bytes: ::core::option::Option<u64>,
    #[prost(string, tag = "3")]
    pub implementation: ::prost::alloc::string::String,
    #[prost(map = "string, string", tag = "4")]
    pub metrics: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
/// Generated client implementations.
pub mod backend_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Backend gRPC 服务定义
    #[derive(Debug, Clone)]
    pub struct BackendServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl BackendServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> BackendServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> BackendServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            BackendServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// 健康检查
        pub async fn health_check(
            &mut self,
            request: impl tonic::IntoRequest<super::HealthRequest>,
        ) -> std::result::Result<tonic::Response<super::HealthResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/v7.backend.BackendService/HealthCheck",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("v7.backend.BackendService", "HealthCheck"));
            self.inner.unary(req, path, codec).await
        }
        /// ===== 认证服务 =====
        /// 用户登录
        pub async fn login(
            &mut self,
            request: impl tonic::IntoRequest<super::LoginRequest>,
        ) -> std::result::Result<tonic::Response<super::LoginResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/v7.backend.BackendService/Login",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("v7.backend.BackendService", "Login"));
            self.inner.unary(req, path, codec).await
        }
        /// 验证令牌
        pub async fn validate_token(
            &mut self,
            request: impl tonic::IntoRequest<super::ValidateTokenRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ValidateTokenResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/v7.backend.BackendService/ValidateToken",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("v7.backend.BackendService", "ValidateToken"));
            self.inner.unary(req, path, codec).await
        }
        /// 用户登出
        pub async fn logout(
            &mut self,
            request: impl tonic::IntoRequest<super::LogoutRequest>,
        ) -> std::result::Result<tonic::Response<super::LogoutResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/v7.backend.BackendService/Logout",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("v7.backend.BackendService", "Logout"));
            self.inner.unary(req, path, codec).await
        }
        /// ===== CRUD服务 =====
        /// 创建项目
        pub async fn create_item(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateItemRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CreateItemResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/v7.backend.BackendService/CreateItem",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("v7.backend.BackendService", "CreateItem"));
            self.inner.unary(req, path, codec).await
        }
        /// 获取项目
        pub async fn get_item(
            &mut self,
            request: impl tonic::IntoRequest<super::GetItemRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetItemResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/v7.backend.BackendService/GetItem",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("v7.backend.BackendService", "GetItem"));
            self.inner.unary(req, path, codec).await
        }
        /// 更新项目
        pub async fn update_item(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateItemRequest>,
        ) -> std::result::Result<
            tonic::Response<super::UpdateItemResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/v7.backend.BackendService/UpdateItem",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("v7.backend.BackendService", "UpdateItem"));
            self.inner.unary(req, path, codec).await
        }
        /// 删除项目
        pub async fn delete_item(
            &mut self,
            request: impl tonic::IntoRequest<super::DeleteItemRequest>,
        ) -> std::result::Result<
            tonic::Response<super::DeleteItemResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/v7.backend.BackendService/DeleteItem",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("v7.backend.BackendService", "DeleteItem"));
            self.inner.unary(req, path, codec).await
        }
        /// 列出项目
        pub async fn list_items(
            &mut self,
            request: impl tonic::IntoRequest<super::ListItemsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListItemsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/v7.backend.BackendService/ListItems",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("v7.backend.BackendService", "ListItems"));
            self.inner.unary(req, path, codec).await
        }
        /// ===== 分析服务 =====
        /// 分析引擎代理调用
        pub async fn analytics_proxy(
            &mut self,
            request: impl tonic::IntoRequest<super::AnalyticsProxyRequest>,
        ) -> std::result::Result<
            tonic::Response<super::AnalyticsProxyResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/v7.backend.BackendService/AnalyticsProxy",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("v7.backend.BackendService", "AnalyticsProxy"));
            self.inner.unary(req, path, codec).await
        }
        /// MVP统计分析服务
        pub async fn statistics(
            &mut self,
            request: impl tonic::IntoRequest<super::StatisticsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::StatisticsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/v7.backend.BackendService/Statistics",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("v7.backend.BackendService", "Statistics"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod backend_service_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with BackendServiceServer.
    #[async_trait]
    pub trait BackendService: std::marker::Send + std::marker::Sync + 'static {
        /// 健康检查
        async fn health_check(
            &self,
            request: tonic::Request<super::HealthRequest>,
        ) -> std::result::Result<tonic::Response<super::HealthResponse>, tonic::Status>;
        /// ===== 认证服务 =====
        /// 用户登录
        async fn login(
            &self,
            request: tonic::Request<super::LoginRequest>,
        ) -> std::result::Result<tonic::Response<super::LoginResponse>, tonic::Status>;
        /// 验证令牌
        async fn validate_token(
            &self,
            request: tonic::Request<super::ValidateTokenRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ValidateTokenResponse>,
            tonic::Status,
        >;
        /// 用户登出
        async fn logout(
            &self,
            request: tonic::Request<super::LogoutRequest>,
        ) -> std::result::Result<tonic::Response<super::LogoutResponse>, tonic::Status>;
        /// ===== CRUD服务 =====
        /// 创建项目
        async fn create_item(
            &self,
            request: tonic::Request<super::CreateItemRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CreateItemResponse>,
            tonic::Status,
        >;
        /// 获取项目
        async fn get_item(
            &self,
            request: tonic::Request<super::GetItemRequest>,
        ) -> std::result::Result<tonic::Response<super::GetItemResponse>, tonic::Status>;
        /// 更新项目
        async fn update_item(
            &self,
            request: tonic::Request<super::UpdateItemRequest>,
        ) -> std::result::Result<
            tonic::Response<super::UpdateItemResponse>,
            tonic::Status,
        >;
        /// 删除项目
        async fn delete_item(
            &self,
            request: tonic::Request<super::DeleteItemRequest>,
        ) -> std::result::Result<
            tonic::Response<super::DeleteItemResponse>,
            tonic::Status,
        >;
        /// 列出项目
        async fn list_items(
            &self,
            request: tonic::Request<super::ListItemsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListItemsResponse>,
            tonic::Status,
        >;
        /// ===== 分析服务 =====
        /// 分析引擎代理调用
        async fn analytics_proxy(
            &self,
            request: tonic::Request<super::AnalyticsProxyRequest>,
        ) -> std::result::Result<
            tonic::Response<super::AnalyticsProxyResponse>,
            tonic::Status,
        >;
        /// MVP统计分析服务
        async fn statistics(
            &self,
            request: tonic::Request<super::StatisticsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::StatisticsResponse>,
            tonic::Status,
        >;
    }
    /// Backend gRPC 服务定义
    #[derive(Debug)]
    pub struct BackendServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> BackendServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for BackendServiceServer<T>
    where
        T: BackendService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/v7.backend.BackendService/HealthCheck" => {
                    #[allow(non_camel_case_types)]
                    struct HealthCheckSvc<T: BackendService>(pub Arc<T>);
                    impl<
                        T: BackendService,
                    > tonic::server::UnaryService<super::HealthRequest>
                    for HealthCheckSvc<T> {
                        type Response = super::HealthResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::HealthRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as BackendService>::health_check(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = HealthCheckSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/v7.backend.BackendService/Login" => {
                    #[allow(non_camel_case_types)]
                    struct LoginSvc<T: BackendService>(pub Arc<T>);
                    impl<
                        T: BackendService,
                    > tonic::server::UnaryService<super::LoginRequest> for LoginSvc<T> {
                        type Response = super::LoginResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::LoginRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as BackendService>::login(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = LoginSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/v7.backend.BackendService/ValidateToken" => {
                    #[allow(non_camel_case_types)]
                    struct ValidateTokenSvc<T: BackendService>(pub Arc<T>);
                    impl<
                        T: BackendService,
                    > tonic::server::UnaryService<super::ValidateTokenRequest>
                    for ValidateTokenSvc<T> {
                        type Response = super::ValidateTokenResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ValidateTokenRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as BackendService>::validate_token(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ValidateTokenSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/v7.backend.BackendService/Logout" => {
                    #[allow(non_camel_case_types)]
                    struct LogoutSvc<T: BackendService>(pub Arc<T>);
                    impl<
                        T: BackendService,
                    > tonic::server::UnaryService<super::LogoutRequest>
                    for LogoutSvc<T> {
                        type Response = super::LogoutResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::LogoutRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as BackendService>::logout(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = LogoutSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/v7.backend.BackendService/CreateItem" => {
                    #[allow(non_camel_case_types)]
                    struct CreateItemSvc<T: BackendService>(pub Arc<T>);
                    impl<
                        T: BackendService,
                    > tonic::server::UnaryService<super::CreateItemRequest>
                    for CreateItemSvc<T> {
                        type Response = super::CreateItemResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CreateItemRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as BackendService>::create_item(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CreateItemSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/v7.backend.BackendService/GetItem" => {
                    #[allow(non_camel_case_types)]
                    struct GetItemSvc<T: BackendService>(pub Arc<T>);
                    impl<
                        T: BackendService,
                    > tonic::server::UnaryService<super::GetItemRequest>
                    for GetItemSvc<T> {
                        type Response = super::GetItemResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetItemRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as BackendService>::get_item(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetItemSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/v7.backend.BackendService/UpdateItem" => {
                    #[allow(non_camel_case_types)]
                    struct UpdateItemSvc<T: BackendService>(pub Arc<T>);
                    impl<
                        T: BackendService,
                    > tonic::server::UnaryService<super::UpdateItemRequest>
                    for UpdateItemSvc<T> {
                        type Response = super::UpdateItemResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UpdateItemRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as BackendService>::update_item(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = UpdateItemSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/v7.backend.BackendService/DeleteItem" => {
                    #[allow(non_camel_case_types)]
                    struct DeleteItemSvc<T: BackendService>(pub Arc<T>);
                    impl<
                        T: BackendService,
                    > tonic::server::UnaryService<super::DeleteItemRequest>
                    for DeleteItemSvc<T> {
                        type Response = super::DeleteItemResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::DeleteItemRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as BackendService>::delete_item(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DeleteItemSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/v7.backend.BackendService/ListItems" => {
                    #[allow(non_camel_case_types)]
                    struct ListItemsSvc<T: BackendService>(pub Arc<T>);
                    impl<
                        T: BackendService,
                    > tonic::server::UnaryService<super::ListItemsRequest>
                    for ListItemsSvc<T> {
                        type Response = super::ListItemsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ListItemsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as BackendService>::list_items(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ListItemsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/v7.backend.BackendService/AnalyticsProxy" => {
                    #[allow(non_camel_case_types)]
                    struct AnalyticsProxySvc<T: BackendService>(pub Arc<T>);
                    impl<
                        T: BackendService,
                    > tonic::server::UnaryService<super::AnalyticsProxyRequest>
                    for AnalyticsProxySvc<T> {
                        type Response = super::AnalyticsProxyResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::AnalyticsProxyRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as BackendService>::analytics_proxy(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = AnalyticsProxySvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/v7.backend.BackendService/Statistics" => {
                    #[allow(non_camel_case_types)]
                    struct StatisticsSvc<T: BackendService>(pub Arc<T>);
                    impl<
                        T: BackendService,
                    > tonic::server::UnaryService<super::StatisticsRequest>
                    for StatisticsSvc<T> {
                        type Response = super::StatisticsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::StatisticsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as BackendService>::statistics(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = StatisticsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(
                            tonic::body::Body::default(),
                        );
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for BackendServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "v7.backend.BackendService";
    impl<T> tonic::server::NamedService for BackendServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
