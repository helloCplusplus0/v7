// This file is @generated by prost-build.
/// 分析请求
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AnalysisRequest {
    #[prost(string, tag = "1")]
    pub request_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub algorithm: ::prost::alloc::string::String,
    #[prost(double, repeated, tag = "3")]
    pub data: ::prost::alloc::vec::Vec<f64>,
    #[prost(map = "string, string", tag = "4")]
    pub params: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    #[prost(message, optional, tag = "5")]
    pub options: ::core::option::Option<AnalysisOptions>,
}
/// 批量分析请求
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchAnalysisRequest {
    #[prost(string, tag = "1")]
    pub batch_id: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "2")]
    pub requests: ::prost::alloc::vec::Vec<AnalysisRequest>,
}
/// 分析选项
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AnalysisOptions {
    /// 优先使用Rust实现
    #[prost(bool, tag = "1")]
    pub prefer_rust: bool,
    /// 允许Python实现
    #[prost(bool, tag = "2")]
    pub allow_python: bool,
    /// 超时时间(毫秒)
    #[prost(int32, tag = "3")]
    pub timeout_ms: i32,
    /// 包含执行元数据
    #[prost(bool, tag = "4")]
    pub include_metadata: bool,
}
/// 分析响应
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AnalysisResponse {
    #[prost(string, tag = "1")]
    pub request_id: ::prost::alloc::string::String,
    #[prost(bool, tag = "2")]
    pub success: bool,
    #[prost(string, tag = "3")]
    pub error_message: ::prost::alloc::string::String,
    /// 结果数据(JSON格式)
    #[prost(string, tag = "4")]
    pub result_json: ::prost::alloc::string::String,
    /// 执行元数据
    #[prost(message, optional, tag = "5")]
    pub metadata: ::core::option::Option<ExecutionMetadata>,
}
/// 执行元数据
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExecutionMetadata {
    /// "rust" or "python"
    #[prost(string, tag = "1")]
    pub implementation: ::prost::alloc::string::String,
    /// 执行时间
    #[prost(int64, tag = "2")]
    pub execution_time_ms: i64,
    /// 使用的算法
    #[prost(string, tag = "3")]
    pub algorithm: ::prost::alloc::string::String,
    /// 数据大小
    #[prost(int32, tag = "4")]
    pub data_size: i32,
    /// 额外统计信息
    #[prost(map = "string, string", tag = "5")]
    pub stats: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
/// 健康检查
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct HealthCheckRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HealthCheckResponse {
    #[prost(bool, tag = "1")]
    pub healthy: bool,
    #[prost(string, tag = "2")]
    pub version: ::prost::alloc::string::String,
    #[prost(map = "string, string", tag = "3")]
    pub capabilities: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
/// 支持的算法
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Empty {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SupportedAlgorithmsResponse {
    #[prost(message, repeated, tag = "1")]
    pub algorithms: ::prost::alloc::vec::Vec<AlgorithmInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AlgorithmInfo {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub description: ::prost::alloc::string::String,
    /// \["rust", "python"\]
    #[prost(string, repeated, tag = "3")]
    pub implementations: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag = "4")]
    pub required_params: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag = "5")]
    pub optional_params: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// Generated client implementations.
pub mod analytics_engine_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// 分析引擎服务
    #[derive(Debug, Clone)]
    pub struct AnalyticsEngineClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl AnalyticsEngineClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> AnalyticsEngineClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> AnalyticsEngineClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            AnalyticsEngineClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// 单次分析
        pub async fn analyze(
            &mut self,
            request: impl tonic::IntoRequest<super::AnalysisRequest>,
        ) -> std::result::Result<
            tonic::Response<super::AnalysisResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/analytics.AnalyticsEngine/Analyze",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("analytics.AnalyticsEngine", "Analyze"));
            self.inner.unary(req, path, codec).await
        }
        /// 批量分析
        pub async fn batch_analyze(
            &mut self,
            request: impl tonic::IntoRequest<super::BatchAnalysisRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::AnalysisResponse>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/analytics.AnalyticsEngine/BatchAnalyze",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("analytics.AnalyticsEngine", "BatchAnalyze"));
            self.inner.server_streaming(req, path, codec).await
        }
        /// 健康检查
        pub async fn health_check(
            &mut self,
            request: impl tonic::IntoRequest<super::HealthCheckRequest>,
        ) -> std::result::Result<
            tonic::Response<super::HealthCheckResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/analytics.AnalyticsEngine/HealthCheck",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("analytics.AnalyticsEngine", "HealthCheck"));
            self.inner.unary(req, path, codec).await
        }
        /// 获取支持的算法列表
        pub async fn get_supported_algorithms(
            &mut self,
            request: impl tonic::IntoRequest<super::Empty>,
        ) -> std::result::Result<
            tonic::Response<super::SupportedAlgorithmsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/analytics.AnalyticsEngine/GetSupportedAlgorithms",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "analytics.AnalyticsEngine",
                        "GetSupportedAlgorithms",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
