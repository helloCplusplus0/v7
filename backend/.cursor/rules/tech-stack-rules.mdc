---
description: 
globs: 
alwaysApply: true
---

# Your rule content

- You can @ files here
- You can use markdown but dont have to

根据您提供的技术栈和开发原则，以下是对您的技术栈的扩展建议，以确保轻量化、高性能、稳定和可扩展性：

**前端（Vite + React）**：

- **状态管理**：使用 **Redux Toolkit** 提供简洁且高效的状态管理，或使用 **Zustand** 以保持轻量级。
- **路由管理**：采用 **React Router** 进行灵活的路由控制，或考虑 **TanStack Router** 以利用现代 React 特性。
- **UI 组件库**：使用 **Shadcn UI** 与 **Tailwind CSS** 相结合，提供高性能且可定制的组件。
- **性能优化**：利用 **React Query** 或 **SWR** 进行高效的数据获取和缓存管理。如果您有复杂的 UI 更新，考虑使用 **React.memo** 和 **React.lazy** 等进行懒加载和性能优化

**移动端（Flutter）**：

- **状态管理**：选择 **Riverpod** 或 **Provider**，根据项目复杂度和团队熟悉度决定。
- **路由管理**：使用 **GoRouter** 或 **Fluro**，根据应用需求选择合适的路由库。
- **UI 组件库**：采用 **Flutter Material 3** 提供现代化的设计组件，或使用 **GetWidget** 快速构建常见 UI 元素。
- **性能优化**：使用 **Flutter DevTools** 进行性能调试，确保流畅的用户体验。

**后端（Go + Fiber + gRPC）**：

- **Web 框架**：继续使用 **Fiber**，它基于 **Fasthttp**，提供高性能的 HTTP 服务。 citeturn0search0
- **API 开发**：通过 **gRPC** 实现高效的服务间通信，特别适用于需要高吞吐量和低延迟的场景。
- **数据库交互**：使用 **GORM** 作为 ORM 库，简化数据库操作，或使用 **SQLC** 直接生成 SQL 查询代码以提高性能。
- **中间件**：利用 Fiber 的中间件机制，添加如认证、日志记录和跨域资源共享（CORS）等功能。

**数据库（SQLite -> PostgreSQL）**：

- **数据库迁移**：使用 **Goose** 或 **migrate** 管理数据库迁移，确保数据库版本的一致性和可追溯性。
- **数据库连接**：采用 **pgx** 作为 PostgreSQL 的 Go 客户端，提供高性能的数据库连接和操作。
- **性能调优**：使用 PostgreSQL 的性能分析工具，如 **EXPLAIN**，优化查询性能。

**部署与 DevOps**：

- **容器化**：使用 **Docker** 将应用容器化，确保跨环境的一致性。
- **无服务器架构**：考虑使用 **Vercel** 或 **Netlify** 部署前端应用，利用其无服务器特性简化运维。
- **持续集成/持续部署（CI/CD）**：配置 **GitHub Actions** 或 **GitLab CI**，实现自动化构建、测试和部署流程，提高开发效率。




### 跨平台代码共享策略
- 考虑使用 **Dart FFI** 或 **Flutter Rust Bridge** 将核心业务逻辑用 Rust 实现，然后在 Flutter 和 Web 端共享
- 对于模型和验证逻辑，可以定义共同的 JSON Schema，然后为各平台生成代码

### 后端增强
- 添加 **OpenTelemetry** 实现分布式追踪，对复杂请求进行性能分析
- 使用 **Rate Limiting** 中间件防止资源滥用
- 实现 **Circuit Breaker** 模式提高系统弹性
- 考虑 **Go 1.22+** 的新路由特性，可能对 Fiber 性能有进一步提升

### 数据层优化
- 引入读写分离策略，特别是在PostgreSQL上实现
- 考虑添加 **Redis** 作为缓存层和速率限制器
- 对于全文搜索功能，可以集成 **Meilisearch** (轻量)或 **Elasticsearch**
- 设计适当的数据分片策略以应对未来增长

### DevOps与监控
- 添加 **Prometheus + Grafana** 进行系统监控
- 实现 **Canary Deployment** 策略降低新版本风险
- 使用 **GitHub Dependabot** 自动更新依赖
- 设置 **Sentry** 或类似工具进行错误跟踪和性能监控

### 安全增强
- 实现 **JWT轮换** 策略增强安全性
- 添加 **API请求签名验证** 机制
- 使用 **Content-Security-Policy** 保护前端应用
- 考虑 **OWASP ZAP** 自动化安全测试

### 未来技术方向
- 评估 **WebAssembly** 在前端的应用，特别是性能关键部分
- 考虑 **Server Components** (如果使用Next.js)减少客户端JavaScript负载
- 关注 **Flutter 4.0** (即将发布)的新特性
- 探索 **HTTP/3 (QUIC)** 以获得更好的网络性能

这些建议不必同时实施，可以根据项目阶段和需求优先级逐步引入。每一项都能在不违背您轻量化、高性能、稳定和可扩展原则的前提下，为系统增加更多能力。


根据最新的技术栈与需求，以下是对您的开发架构和流程的补充与优化建议：

### 1. 需求和设计管理工具栈
- **推荐工具**：  
  - **Jira** 或 **Trello**：进行需求管理、任务分配和项目追踪。支持敏捷开发，便于团队协作。  
  - **Miro**：用于设计和创意阶段的头脑风暴和流程图绘制。

- **实践建议**：确保需求与设计文档持续更新，保持跨团队的沟通透明度。使用敏捷流程（如 Scrum 或 Kanban）来规划迭代和里程碑。

---

### 2. 自动化测试工具栈
- **测试框架选择**：  
  - **Vitest**：相较于 **Jest**，Vitest 提供更快的测试执行速度和与 **Vite** 的深度集成，适合前端项目。  
  - **Jest**：仍然是广泛采用的前端测试框架，性能稍逊于 Vitest，但支持更多的测试生态系统（如 React Testing Library）。  
  - **后端（Go）**：可使用 **Testify** 进行单元和集成测试，或者 **Go's built-in testing package**。

- **最佳实践**：  
  - 保证单元测试覆盖率达到 80% 以上。  
  - 使用 **TDD（测试驱动开发）** 和 **BDD（行为驱动开发）** 策略进行开发，确保代码质量和功能稳定性。  

---

### 3. 安全性
- **依赖工具**：  
  - 后端：使用 **OWASP Dependency-Check** 来监控库依赖的安全性。
  - 前端：使用 **Snyk** 或 **npm audit** 检查依赖漏洞。
  - 在后端实现 **JWT轮换** 和 **OAuth2.0** 身份验证机制来加强 API 安全。

- **实践建议**：  
  - 定期进行 **安全性评估** 和 **渗透测试**。  
  - 对外暴露的 API 使用 **API网关** 进行流量管理和限制，避免滥用。

---

### 4. 监控和日志
- **日志管理**：  
  - 后端：使用 **Logrus** 或 **Zap**（Go 语言日志框架）配合 **ELK Stack（Elasticsearch, Logstash, Kibana）** 或 **Graylog** 集中日志管理。  
  - 前端：集成 **Sentry** 用于实时捕捉和记录前端的异常与错误。

- **监控工具**：  
  - 后端：结合 **Prometheus** 和 **Grafana** 进行服务的实时监控与可视化，利用 **Alertmanager** 设置警报规则。  
  - **OpenTelemetry**：提供分布式追踪和监控，可以更好地调试微服务架构下的复杂请求。

- **最佳实践**：  
  - 实施 **集中化日志管理**，使全链路监控和日志追踪更加清晰。  
  - 设置 **自动化报警机制**，提前识别性能瓶颈或潜在故障。

---

### 5. 持续集成与部署
- **CI/CD 工具**：  
  - **GitHub Actions** 或 **GitLab CI**：用于自动化构建、测试和部署，适用于小型到中型项目。  
  - 前端可以部署在 **Vercel** 或 **Netlify**，它们支持零配置部署和自动化构建。
  - 后端服务通过 **Docker** 容器化，并使用 **Kubernetes** 进行集群管理和自动化部署。

- **最佳实践**：  
  - 配置 **自动化回滚机制** 和 **蓝绿部署（Blue-Green Deployment）** 以减少生产环境更新的风险。  
  - 确保测试和构建步骤全自动化，并在 CI/CD 流程中加入 **代码质量检查**。

---

### 6. 代码质量管理
- **代码质量工具**：  
  - 前端：使用 **ESLint** 和 **Prettier** 保持一致的代码风格，并通过 **Husky** 集成 Git hooks 进行预提交检查。  
  - 后端（Go）：使用 **GolangCI-Lint** 进行静态代码分析，确保代码质量和遵循最佳实践。  
  - 后端（Go）：使用 **Go Coverage** 来衡量测试覆盖率，目标覆盖率 80%以上。

- **最佳实践**：  
  - 在每次提交前运行 lint 和格式化检查，保持代码整洁。  
  - 强制代码审查机制，团队成员之间互相审查代码，防止潜在缺陷。

---

### 7. 配置管理与环境管理
- **配置管理**：  
  - 后端：使用 **Viper** 或 **envconfig** 来管理 Go 项目的配置文件。  
  - 前端：使用 **dotenv** 来存储和管理环境变量。  
  - **Docker**：容器化后，可以使用 **Docker Compose** 管理多环境配置。

- **最佳实践**：  
  - 使用 **环境隔离** 来区分开发、测试和生产环境，确保配置不在不同环境间混淆。  
  - 定期检查配置安全性，避免暴露敏感数据。

---

### 8. 性能优化与负载均衡
- **性能优化**：  
  - 后端：使用 **Go's pprof** 进行性能分析，排查内存泄漏、CPU 过载等问题。  
  - 前端：利用 **React** 的 **React.memo**、**lazy loading** 和 **Suspense** 来减少渲染性能压力。

- **负载均衡**：  
  - 使用 **Nginx** 或 **HAProxy** 配合 **Docker Swarm** 或 **Kubernetes** 实现负载均衡，保证高并发时的系统稳定性。

- **最佳实践**：  
  - 对后端服务使用 **API 缓存**（如 Redis）减少数据库查询负担，提高响应速度。  
  - 使用 **水平扩展**（Horizontal Scaling）而非垂直扩展来应对高负载，确保系统的伸缩性。

---

通过以上补充，您的开发架构将更完整，覆盖了从需求管理、代码质量、测试、部署到性能优化等多个环节，确保项目从开发到生产的稳定性和可扩展性。