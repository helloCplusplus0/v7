name: FMOD v7 Full-Stack CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  REGISTRY: 192.168.31.84:5000
  BACKEND_IMAGE: fmod-backend
  FRONTEND_IMAGE: fmod-frontend

jobs:
  # 代码质量检查
  quality-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: web/package-lock.json

      # 后端代码检查
      - name: Rust Format Check
        run: |
          cd backend
          cargo fmt --check

      - name: Rust Clippy
        run: |
          cd backend
          cargo clippy --all-targets --all-features -- -D warnings

      # 前端代码检查
      - name: Frontend Dependencies
        run: |
          cd web
          npm ci

      - name: Frontend Lint
        run: |
          cd web
          npm run lint

      - name: Frontend Type Check
        run: |
          cd web
          npm run type-check

  # 运行测试
  test:
    runs-on: ubuntu-latest
    needs: quality-check
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: web/package-lock.json

      # 后端测试
      - name: Backend Unit Tests
        run: |
          cd backend
          cargo test --verbose

      - name: Backend Integration Tests
        run: |
          cd backend
          mkdir -p data
          DATABASE_URL=sqlite:./data/test.db cargo test --test integration

      # 前端测试
      - name: Frontend Dependencies
        run: |
          cd web
          npm ci

      - name: Frontend Unit Tests
        run: |
          cd web
          npm run test:unit

      - name: Frontend Integration Tests
        run: |
          cd web
          npm run test:integration

      - name: Test Coverage
        run: |
          cd web
          npm run test:coverage

  # 构建 Podman 镜像
  build:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Podman
        run: |
          sudo apt-get update
          sudo apt-get install -y podman

      - name: Build Backend Image
        run: |
          podman build -t $REGISTRY/$BACKEND_IMAGE:${{ github.sha }} -f backend/Dockerfile backend/
          podman build -t $REGISTRY/$BACKEND_IMAGE:latest -f backend/Dockerfile backend/

      - name: Build Frontend Image
        run: |
          podman build -t $REGISTRY/$FRONTEND_IMAGE:${{ github.sha }} -f web/Dockerfile web/
          podman build -t $REGISTRY/$FRONTEND_IMAGE:latest -f web/Dockerfile web/

      # 推送到私有镜像仓库（如果有的话）
      - name: Push Images
        if: github.event_name == 'push'
        run: |
          echo "镜像构建完成，标签为: ${{ github.sha }}"
          # podman push $REGISTRY/$BACKEND_IMAGE:${{ github.sha }}
          # podman push $REGISTRY/$FRONTEND_IMAGE:${{ github.sha }}

  # 部署到测试环境
  deploy-staging:
    runs-on: self-hosted
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Deploy to Staging
        run: |
          echo "部署到测试环境"
          # 这里可以添加具体的部署脚本

  # 部署到生产环境
  deploy-production:
    runs-on: self-hosted
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Deploy to Production
        run: |
          echo "部署到生产环境"
          # 这里可以添加具体的部署脚本 