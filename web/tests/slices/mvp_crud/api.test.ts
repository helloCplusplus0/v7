// üß™ MVP CRUD API ÂçïÂÖÉÊµãËØï - ÁÆÄÂåñÁâàÊú¨
// ‰∏ìÊ≥®Ê†∏ÂøÉCRUDÂäüËÉΩÊµãËØïÔºåÈÅøÂÖçÂ§çÊùÇÁöÑmockËÆæÁΩÆ

import { describe, test, expect, beforeEach, vi } from 'vitest';
import { CrudApiClient } from '../../../slices/mvp_crud/api';
import { createMockItem, createMockCreateRequest } from './test-utils';

// Mock grpc client
vi.mock('../../../shared/api', () => ({
  grpcClient: {
    createItem: vi.fn(),
    getItem: vi.fn(),
    updateItem: vi.fn(),
    deleteItem: vi.fn(),
    listItems: vi.fn(),
    healthCheck: vi.fn()
  }
}));

describe('CrudApiClient - Ê†∏ÂøÉÂäüËÉΩÊµãËØï', () => {
  let apiClient: CrudApiClient;
  let mockGrpcClient: any;

  beforeEach(async () => {
    vi.clearAllMocks();
    const { grpcClient } = await import('../../../shared/api');
    mockGrpcClient = grpcClient;
    apiClient = new CrudApiClient();
  });

  describe('Âü∫Á°ÄÂäüËÉΩ', () => {
    test('Â∫îËØ•Ê≠£Á°ÆÂàùÂßãÂåñ', () => {
      expect(apiClient).toBeInstanceOf(CrudApiClient);
    });

    test('Â∫îËØ•ÊúâÊâÄÊúâÂøÖÈúÄÁöÑÊñπÊ≥ï', () => {
      expect(typeof apiClient.createItem).toBe('function');
      expect(typeof apiClient.getItem).toBe('function');
      expect(typeof apiClient.updateItem).toBe('function');
      expect(typeof apiClient.deleteItem).toBe('function');
      expect(typeof apiClient.listItems).toBe('function');
      expect(typeof apiClient.healthCheck).toBe('function');
    });
  });

  describe('ÂàõÂª∫È°πÁõÆ', () => {
    test('Â∫îËØ•ÊàêÂäüÂàõÂª∫È°πÁõÆ', async () => {
      const mockRequest = createMockCreateRequest();
      const mockResponse = createMockItem();
      
      mockGrpcClient.createItem.mockResolvedValue({
        success: true,
        data: { item: mockResponse }
      });

      const result = await apiClient.createItem(mockRequest);
      
      expect(mockGrpcClient.createItem).toHaveBeenCalledWith(mockRequest);
      expect(result).toEqual(mockResponse);
    });

    test('Â∫îËØ•Â§ÑÁêÜÂàõÂª∫Â§±Ë¥•', async () => {
      const mockRequest = createMockCreateRequest();
      
      mockGrpcClient.createItem.mockRejectedValue(new Error('ÂàõÂª∫Â§±Ë¥•'));

      await expect(apiClient.createItem(mockRequest)).rejects.toThrow('ÂàõÂª∫Â§±Ë¥•');
    });
  });

  describe('Ëé∑ÂèñÈ°πÁõÆ', () => {
    test('Â∫îËØ•ÊàêÂäüËé∑ÂèñÈ°πÁõÆ', async () => {
      const mockId = 'test-id';
      const mockResponse = createMockItem({ id: mockId });
      
      mockGrpcClient.getItem.mockResolvedValue({
        success: true,
        data: { item: mockResponse }
      });

      const result = await apiClient.getItem(mockId);
      
             expect(mockGrpcClient.getItem).toHaveBeenCalledWith({ id: mockId });
      expect(result).toEqual(mockResponse);
    });

    test('Â∫îËØ•Â§ÑÁêÜËé∑ÂèñÂ§±Ë¥•', async () => {
      const mockId = 'test-id';
      
      mockGrpcClient.getItem.mockRejectedValue(new Error('È°πÁõÆ‰∏çÂ≠òÂú®'));

      await expect(apiClient.getItem(mockId)).rejects.toThrow('È°πÁõÆ‰∏çÂ≠òÂú®');
    });
  });

  describe('Êõ¥Êñ∞È°πÁõÆ', () => {
    test('Â∫îËØ•ÊàêÂäüÊõ¥Êñ∞È°πÁõÆ', async () => {
      const mockId = 'test-id';
      const mockData = { name: 'Êõ¥Êñ∞ÂêéÁöÑÂêçÁß∞' };
      const mockResponse = createMockItem({ id: mockId, ...mockData });
      
      mockGrpcClient.updateItem.mockResolvedValue({
        success: true,
        data: { item: mockResponse }
      });

      const result = await apiClient.updateItem(mockId, mockData);
      
             expect(mockGrpcClient.updateItem).toHaveBeenCalledWith({
         id: mockId,
         ...mockData
       });
      expect(result).toEqual(mockResponse);
    });

    test('Â∫îËØ•Â§ÑÁêÜÊõ¥Êñ∞Â§±Ë¥•', async () => {
      const mockId = 'test-id';
      const mockData = { name: 'Êõ¥Êñ∞ÂêéÁöÑÂêçÁß∞' };
      
      mockGrpcClient.updateItem.mockRejectedValue(new Error('Êõ¥Êñ∞Â§±Ë¥•'));

      await expect(apiClient.updateItem(mockId, mockData)).rejects.toThrow('Êõ¥Êñ∞Â§±Ë¥•');
    });
  });

  describe('Âà†Èô§È°πÁõÆ', () => {
    test('Â∫îËØ•ÊàêÂäüÂà†Èô§È°πÁõÆ', async () => {
      const mockId = 'test-id';
      
      mockGrpcClient.deleteItem.mockResolvedValue({
        success: true,
        data: {}
      });

      await apiClient.deleteItem(mockId);
      
             expect(mockGrpcClient.deleteItem).toHaveBeenCalledWith({ id: mockId });
    });

    test('Â∫îËØ•Â§ÑÁêÜÂà†Èô§Â§±Ë¥•', async () => {
      const mockId = 'test-id';
      
      mockGrpcClient.deleteItem.mockRejectedValue(new Error('Âà†Èô§Â§±Ë¥•'));

      await expect(apiClient.deleteItem(mockId)).rejects.toThrow('Âà†Èô§Â§±Ë¥•');
    });
  });

  describe('ÂàóÂá∫È°πÁõÆ', () => {
    test('Â∫îËØ•ÊàêÂäüÂàóÂá∫È°πÁõÆ', async () => {
      const mockItems = [createMockItem(), createMockItem()];
      const mockResponse = {
        items: mockItems,
        total: mockItems.length
      };
      
      mockGrpcClient.listItems.mockResolvedValue({
        success: true,
        data: mockResponse
      });

      const result = await apiClient.listItems();
      
      expect(mockGrpcClient.listItems).toHaveBeenCalled();
      expect(result).toEqual(mockResponse);
    });

         test('Â∫îËØ•ÊîØÊåÅÊü•ËØ¢ÂèÇÊï∞', async () => {
       const limit = 10;
       const offset = 0;
       const search = 'ÊµãËØï';
       
       const mockResponse = {
         items: [],
         total: 0
       };
       
       mockGrpcClient.listItems.mockResolvedValue({
         success: true,
         data: mockResponse
       });

       const result = await apiClient.listItems(limit, offset, search);
       
       expect(mockGrpcClient.listItems).toHaveBeenCalledWith({
         limit,
         offset,
         search
       });
       expect(result).toEqual(mockResponse);
     });

    test('Â∫îËØ•Â§ÑÁêÜÂàóË°®Â§±Ë¥•', async () => {
      mockGrpcClient.listItems.mockRejectedValue(new Error('Ëé∑ÂèñÂàóË°®Â§±Ë¥•'));

      await expect(apiClient.listItems()).rejects.toThrow('Ëé∑ÂèñÂàóË°®Â§±Ë¥•');
    });
  });

  describe('ÂÅ•Â∫∑Ê£ÄÊü•', () => {
         test('Â∫îËØ•ÊàêÂäüÊâßË°åÂÅ•Â∫∑Ê£ÄÊü•', async () => {
       const mockResponse = { status: 'healthy' };
       
       mockGrpcClient.healthCheck.mockResolvedValue({
         success: true,
         data: mockResponse
       });

       const result = await apiClient.healthCheck();
       
       expect(mockGrpcClient.healthCheck).toHaveBeenCalled();
       expect(result).toBe(true);
     });

         test('Â∫îËØ•Â§ÑÁêÜÂÅ•Â∫∑Ê£ÄÊü•Â§±Ë¥•', async () => {
       mockGrpcClient.healthCheck.mockRejectedValue(new Error('ÊúçÂä°‰∏çÂèØÁî®'));

       const result = await apiClient.healthCheck();
       expect(result).toBe(false);
     });
  });

  describe('ÊâπÈáèÊìç‰Ωú', () => {
    test('Â∫îËØ•ÊîØÊåÅÊâπÈáèÂà†Èô§', async () => {
      const mockIds = ['id1', 'id2', 'id3'];
      
      mockGrpcClient.deleteItem.mockResolvedValue({
        success: true,
        data: {}
      });

      await apiClient.batchDeleteItems(mockIds);
      
      expect(mockGrpcClient.deleteItem).toHaveBeenCalledTimes(mockIds.length);
             mockIds.forEach(id => {
         expect(mockGrpcClient.deleteItem).toHaveBeenCalledWith({ id });
       });
    });

         test('Â∫îËØ•Â§ÑÁêÜÊâπÈáèÂà†Èô§Â§±Ë¥•', async () => {
       const mockIds = ['id1', 'id2'];
       
       mockGrpcClient.deleteItem.mockRejectedValue(new Error('Âà†Èô§Â§±Ë¥•'));

       const result = await apiClient.batchDeleteItems(mockIds);
       
       expect(result.success).toBe(0);
       expect(result.failed).toBe(2);
       expect(result.errors).toHaveLength(2);
     });
  });

  describe('ÈîôËØØÂ§ÑÁêÜ', () => {
    test('Â∫îËØ•Ê≠£Á°ÆÂ§ÑÁêÜÁΩëÁªúÈîôËØØ', async () => {
      mockGrpcClient.listItems.mockRejectedValue(new Error('Network error'));

      await expect(apiClient.listItems()).rejects.toThrow('Network error');
    });

    test('Â∫îËØ•Ê≠£Á°ÆÂ§ÑÁêÜÊúçÂä°Âô®ÈîôËØØ', async () => {
      mockGrpcClient.createItem.mockRejectedValue(new Error('Server error'));

      await expect(apiClient.createItem(createMockCreateRequest())).rejects.toThrow('Server error');
    });
  });

  describe('ÂèÇÊï∞È™åËØÅ', () => {
    test('ÂàõÂª∫È°πÁõÆÊó∂Â∫îËØ•È™åËØÅÂøÖÈúÄÂèÇÊï∞', async () => {
      const invalidRequest = {} as any;
      
      await expect(apiClient.createItem(invalidRequest)).rejects.toThrow();
    });

    test('Ëé∑ÂèñÈ°πÁõÆÊó∂Â∫îËØ•È™åËØÅID', async () => {
      await expect(apiClient.getItem('')).rejects.toThrow();
    });

    test('Êõ¥Êñ∞È°πÁõÆÊó∂Â∫îËØ•È™åËØÅIDÂíåÊï∞ÊçÆ', async () => {
      await expect(apiClient.updateItem('', {})).rejects.toThrow();
    });

    test('Âà†Èô§È°πÁõÆÊó∂Â∫îËØ•È™åËØÅID', async () => {
      await expect(apiClient.deleteItem('')).rejects.toThrow();
    });
  });

  describe('ÂÖºÂÆπÊÄßÊñπÊ≥ï', () => {
         test('Â∫îËØ•ÊîØÊåÅ create ÊñπÊ≥ï', async () => {
       const mockRequest = createMockCreateRequest();
       const mockResponse = createMockItem();
       
       mockGrpcClient.createItem.mockResolvedValue({
         success: true,
         data: { item: mockResponse }
       });

       const result = await apiClient.create(mockRequest);
       
       expect(result).toEqual({
         success: true,
         data: mockResponse
       });
     });

         test('Â∫îËØ•ÊîØÊåÅ get ÊñπÊ≥ï', async () => {
       const mockId = 'test-id';
       const mockResponse = createMockItem({ id: mockId });
       
       mockGrpcClient.getItem.mockResolvedValue({
         success: true,
         data: { item: mockResponse }
       });

       const result = await apiClient.get(mockId);
       
       expect(result).toEqual({
         success: true,
         data: mockResponse
       });
     });

         test('Â∫îËØ•ÊîØÊåÅ update ÊñπÊ≥ï', async () => {
       const mockId = 'test-id';
       const mockData = { name: 'Êõ¥Êñ∞ÂêçÁß∞' };
       const mockResponse = createMockItem({ id: mockId, ...mockData });
       
       mockGrpcClient.updateItem.mockResolvedValue({
         success: true,
         data: { item: mockResponse }
       });

       const result = await apiClient.update(mockId, mockData);
       
       expect(result).toEqual({
         success: true,
         data: mockResponse
       });
     });

         test('Â∫îËØ•ÊîØÊåÅ delete ÊñπÊ≥ï', async () => {
       const mockId = 'test-id';
       
       mockGrpcClient.deleteItem.mockResolvedValue({
         success: true,
         data: {}
       });

       const result = await apiClient.delete(mockId);
       
       expect(mockGrpcClient.deleteItem).toHaveBeenCalledWith({ id: mockId });
       expect(result).toEqual({
         success: true
       });
     });

         test('Â∫îËØ•ÊîØÊåÅ list ÊñπÊ≥ï', async () => {
       const mockResponse = {
         items: [createMockItem()],
         total: 1
       };
       
       mockGrpcClient.listItems.mockResolvedValue({
         success: true,
         data: mockResponse
       });

       const result = await apiClient.list();
       
       expect(result).toEqual({
         success: true,
         data: mockResponse.items,
         total: mockResponse.total
       });
     });
  });
}); 