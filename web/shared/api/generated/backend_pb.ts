// @generated by protoc-gen-es v1.10.1 with parameter "target=ts,import_extension=none,ts_nocheck=false"
// @generated from file backend.proto (package v7.backend, syntax proto3)
/* eslint-disable */

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from '@bufbuild/protobuf';
import { Message, proto3, protoInt64 } from '@bufbuild/protobuf';

/**
 * 健康检查消息
 *
 * @generated from message v7.backend.HealthRequest
 */
export class HealthRequest extends Message<HealthRequest> {
  /**
   * @generated from field: string service = 1;
   */
  service = '';

  constructor(data?: PartialMessage<HealthRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'v7.backend.HealthRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'service', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HealthRequest {
    return new HealthRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HealthRequest {
    return new HealthRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HealthRequest {
    return new HealthRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: HealthRequest | PlainMessage<HealthRequest> | undefined,
    b: HealthRequest | PlainMessage<HealthRequest> | undefined
  ): boolean {
    return proto3.util.equals(HealthRequest, a, b);
  }
}

/**
 * @generated from message v7.backend.HealthResponse
 */
export class HealthResponse extends Message<HealthResponse> {
  /**
   * @generated from field: string status = 1;
   */
  status = '';

  /**
   * @generated from field: string version = 2;
   */
  version = '';

  /**
   * @generated from field: int64 timestamp = 3;
   */
  timestamp = protoInt64.zero;

  constructor(data?: PartialMessage<HealthResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'v7.backend.HealthResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'status', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'version', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'timestamp', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HealthResponse {
    return new HealthResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HealthResponse {
    return new HealthResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HealthResponse {
    return new HealthResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: HealthResponse | PlainMessage<HealthResponse> | undefined,
    b: HealthResponse | PlainMessage<HealthResponse> | undefined
  ): boolean {
    return proto3.util.equals(HealthResponse, a, b);
  }
}

/**
 * ===== 认证相关消息 =====
 *
 * @generated from message v7.backend.LoginRequest
 */
export class LoginRequest extends Message<LoginRequest> {
  /**
   * @generated from field: string username = 1;
   */
  username = '';

  /**
   * @generated from field: string password = 2;
   */
  password = '';

  constructor(data?: PartialMessage<LoginRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'v7.backend.LoginRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'username', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'password', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LoginRequest {
    return new LoginRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LoginRequest {
    return new LoginRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LoginRequest {
    return new LoginRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: LoginRequest | PlainMessage<LoginRequest> | undefined,
    b: LoginRequest | PlainMessage<LoginRequest> | undefined
  ): boolean {
    return proto3.util.equals(LoginRequest, a, b);
  }
}

/**
 * @generated from message v7.backend.LoginResponse
 */
export class LoginResponse extends Message<LoginResponse> {
  /**
   * @generated from field: bool success = 1;
   */
  success = false;

  /**
   * @generated from field: string error = 2;
   */
  error = '';

  /**
   * @generated from field: optional v7.backend.UserSession session = 3;
   */
  session?: UserSession;

  constructor(data?: PartialMessage<LoginResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'v7.backend.LoginResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'success', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: 'error', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'session', kind: 'message', T: UserSession, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LoginResponse {
    return new LoginResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LoginResponse {
    return new LoginResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LoginResponse {
    return new LoginResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: LoginResponse | PlainMessage<LoginResponse> | undefined,
    b: LoginResponse | PlainMessage<LoginResponse> | undefined
  ): boolean {
    return proto3.util.equals(LoginResponse, a, b);
  }
}

/**
 * @generated from message v7.backend.UserSession
 */
export class UserSession extends Message<UserSession> {
  /**
   * @generated from field: string token = 1;
   */
  token = '';

  /**
   * @generated from field: string user_id = 2;
   */
  userId = '';

  /**
   * @generated from field: string username = 3;
   */
  username = '';

  /**
   * @generated from field: int64 expires_at = 4;
   */
  expiresAt = protoInt64.zero;

  constructor(data?: PartialMessage<UserSession>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'v7.backend.UserSession';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'token', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'user_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'username', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 4, name: 'expires_at', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserSession {
    return new UserSession().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserSession {
    return new UserSession().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserSession {
    return new UserSession().fromJsonString(jsonString, options);
  }

  static equals(
    a: UserSession | PlainMessage<UserSession> | undefined,
    b: UserSession | PlainMessage<UserSession> | undefined
  ): boolean {
    return proto3.util.equals(UserSession, a, b);
  }
}

/**
 * @generated from message v7.backend.ValidateTokenRequest
 */
export class ValidateTokenRequest extends Message<ValidateTokenRequest> {
  /**
   * @generated from field: string token = 1;
   */
  token = '';

  constructor(data?: PartialMessage<ValidateTokenRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'v7.backend.ValidateTokenRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'token', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValidateTokenRequest {
    return new ValidateTokenRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValidateTokenRequest {
    return new ValidateTokenRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): ValidateTokenRequest {
    return new ValidateTokenRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: ValidateTokenRequest | PlainMessage<ValidateTokenRequest> | undefined,
    b: ValidateTokenRequest | PlainMessage<ValidateTokenRequest> | undefined
  ): boolean {
    return proto3.util.equals(ValidateTokenRequest, a, b);
  }
}

/**
 * @generated from message v7.backend.ValidateTokenResponse
 */
export class ValidateTokenResponse extends Message<ValidateTokenResponse> {
  /**
   * @generated from field: bool success = 1;
   */
  success = false;

  /**
   * @generated from field: string error = 2;
   */
  error = '';

  /**
   * @generated from field: optional v7.backend.UserSession session = 3;
   */
  session?: UserSession;

  constructor(data?: PartialMessage<ValidateTokenResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'v7.backend.ValidateTokenResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'success', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: 'error', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'session', kind: 'message', T: UserSession, opt: true },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): ValidateTokenResponse {
    return new ValidateTokenResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValidateTokenResponse {
    return new ValidateTokenResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): ValidateTokenResponse {
    return new ValidateTokenResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: ValidateTokenResponse | PlainMessage<ValidateTokenResponse> | undefined,
    b: ValidateTokenResponse | PlainMessage<ValidateTokenResponse> | undefined
  ): boolean {
    return proto3.util.equals(ValidateTokenResponse, a, b);
  }
}

/**
 * @generated from message v7.backend.LogoutRequest
 */
export class LogoutRequest extends Message<LogoutRequest> {
  /**
   * @generated from field: string token = 1;
   */
  token = '';

  constructor(data?: PartialMessage<LogoutRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'v7.backend.LogoutRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'token', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LogoutRequest {
    return new LogoutRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LogoutRequest {
    return new LogoutRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LogoutRequest {
    return new LogoutRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: LogoutRequest | PlainMessage<LogoutRequest> | undefined,
    b: LogoutRequest | PlainMessage<LogoutRequest> | undefined
  ): boolean {
    return proto3.util.equals(LogoutRequest, a, b);
  }
}

/**
 * @generated from message v7.backend.LogoutResponse
 */
export class LogoutResponse extends Message<LogoutResponse> {
  /**
   * @generated from field: bool success = 1;
   */
  success = false;

  /**
   * @generated from field: string error = 2;
   */
  error = '';

  constructor(data?: PartialMessage<LogoutResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'v7.backend.LogoutResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'success', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: 'error', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LogoutResponse {
    return new LogoutResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LogoutResponse {
    return new LogoutResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LogoutResponse {
    return new LogoutResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: LogoutResponse | PlainMessage<LogoutResponse> | undefined,
    b: LogoutResponse | PlainMessage<LogoutResponse> | undefined
  ): boolean {
    return proto3.util.equals(LogoutResponse, a, b);
  }
}

/**
 * ===== CRUD相关消息 =====
 *
 * @generated from message v7.backend.CreateItemRequest
 */
export class CreateItemRequest extends Message<CreateItemRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = '';

  /**
   * @generated from field: optional string description = 2;
   */
  description?: string;

  /**
   * @generated from field: int32 value = 3;
   */
  value = 0;

  constructor(data?: PartialMessage<CreateItemRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'v7.backend.CreateItemRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'name', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'description', kind: 'scalar', T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: 'value', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateItemRequest {
    return new CreateItemRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateItemRequest {
    return new CreateItemRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateItemRequest {
    return new CreateItemRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: CreateItemRequest | PlainMessage<CreateItemRequest> | undefined,
    b: CreateItemRequest | PlainMessage<CreateItemRequest> | undefined
  ): boolean {
    return proto3.util.equals(CreateItemRequest, a, b);
  }
}

/**
 * @generated from message v7.backend.CreateItemResponse
 */
export class CreateItemResponse extends Message<CreateItemResponse> {
  /**
   * @generated from field: bool success = 1;
   */
  success = false;

  /**
   * @generated from field: string error = 2;
   */
  error = '';

  /**
   * @generated from field: optional v7.backend.Item item = 3;
   */
  item?: Item;

  constructor(data?: PartialMessage<CreateItemResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'v7.backend.CreateItemResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'success', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: 'error', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'item', kind: 'message', T: Item, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateItemResponse {
    return new CreateItemResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateItemResponse {
    return new CreateItemResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): CreateItemResponse {
    return new CreateItemResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: CreateItemResponse | PlainMessage<CreateItemResponse> | undefined,
    b: CreateItemResponse | PlainMessage<CreateItemResponse> | undefined
  ): boolean {
    return proto3.util.equals(CreateItemResponse, a, b);
  }
}

/**
 * @generated from message v7.backend.GetItemRequest
 */
export class GetItemRequest extends Message<GetItemRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = '';

  constructor(data?: PartialMessage<GetItemRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'v7.backend.GetItemRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetItemRequest {
    return new GetItemRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetItemRequest {
    return new GetItemRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetItemRequest {
    return new GetItemRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: GetItemRequest | PlainMessage<GetItemRequest> | undefined,
    b: GetItemRequest | PlainMessage<GetItemRequest> | undefined
  ): boolean {
    return proto3.util.equals(GetItemRequest, a, b);
  }
}

/**
 * @generated from message v7.backend.GetItemResponse
 */
export class GetItemResponse extends Message<GetItemResponse> {
  /**
   * @generated from field: bool success = 1;
   */
  success = false;

  /**
   * @generated from field: string error = 2;
   */
  error = '';

  /**
   * @generated from field: optional v7.backend.Item item = 3;
   */
  item?: Item;

  constructor(data?: PartialMessage<GetItemResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'v7.backend.GetItemResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'success', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: 'error', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'item', kind: 'message', T: Item, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetItemResponse {
    return new GetItemResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetItemResponse {
    return new GetItemResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetItemResponse {
    return new GetItemResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: GetItemResponse | PlainMessage<GetItemResponse> | undefined,
    b: GetItemResponse | PlainMessage<GetItemResponse> | undefined
  ): boolean {
    return proto3.util.equals(GetItemResponse, a, b);
  }
}

/**
 * @generated from message v7.backend.UpdateItemRequest
 */
export class UpdateItemRequest extends Message<UpdateItemRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = '';

  /**
   * @generated from field: optional string name = 2;
   */
  name?: string;

  /**
   * @generated from field: optional string description = 3;
   */
  description?: string;

  /**
   * @generated from field: optional int32 value = 4;
   */
  value?: number;

  constructor(data?: PartialMessage<UpdateItemRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'v7.backend.UpdateItemRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'name', kind: 'scalar', T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: 'description', kind: 'scalar', T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: 'value', kind: 'scalar', T: 5 /* ScalarType.INT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateItemRequest {
    return new UpdateItemRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateItemRequest {
    return new UpdateItemRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateItemRequest {
    return new UpdateItemRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: UpdateItemRequest | PlainMessage<UpdateItemRequest> | undefined,
    b: UpdateItemRequest | PlainMessage<UpdateItemRequest> | undefined
  ): boolean {
    return proto3.util.equals(UpdateItemRequest, a, b);
  }
}

/**
 * @generated from message v7.backend.UpdateItemResponse
 */
export class UpdateItemResponse extends Message<UpdateItemResponse> {
  /**
   * @generated from field: bool success = 1;
   */
  success = false;

  /**
   * @generated from field: string error = 2;
   */
  error = '';

  /**
   * @generated from field: optional v7.backend.Item item = 3;
   */
  item?: Item;

  constructor(data?: PartialMessage<UpdateItemResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'v7.backend.UpdateItemResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'success', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: 'error', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'item', kind: 'message', T: Item, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateItemResponse {
    return new UpdateItemResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateItemResponse {
    return new UpdateItemResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): UpdateItemResponse {
    return new UpdateItemResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: UpdateItemResponse | PlainMessage<UpdateItemResponse> | undefined,
    b: UpdateItemResponse | PlainMessage<UpdateItemResponse> | undefined
  ): boolean {
    return proto3.util.equals(UpdateItemResponse, a, b);
  }
}

/**
 * @generated from message v7.backend.DeleteItemRequest
 */
export class DeleteItemRequest extends Message<DeleteItemRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = '';

  constructor(data?: PartialMessage<DeleteItemRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'v7.backend.DeleteItemRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteItemRequest {
    return new DeleteItemRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteItemRequest {
    return new DeleteItemRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteItemRequest {
    return new DeleteItemRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: DeleteItemRequest | PlainMessage<DeleteItemRequest> | undefined,
    b: DeleteItemRequest | PlainMessage<DeleteItemRequest> | undefined
  ): boolean {
    return proto3.util.equals(DeleteItemRequest, a, b);
  }
}

/**
 * @generated from message v7.backend.DeleteItemResponse
 */
export class DeleteItemResponse extends Message<DeleteItemResponse> {
  /**
   * @generated from field: bool success = 1;
   */
  success = false;

  /**
   * @generated from field: string error = 2;
   */
  error = '';

  constructor(data?: PartialMessage<DeleteItemResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'v7.backend.DeleteItemResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'success', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: 'error', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteItemResponse {
    return new DeleteItemResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteItemResponse {
    return new DeleteItemResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): DeleteItemResponse {
    return new DeleteItemResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: DeleteItemResponse | PlainMessage<DeleteItemResponse> | undefined,
    b: DeleteItemResponse | PlainMessage<DeleteItemResponse> | undefined
  ): boolean {
    return proto3.util.equals(DeleteItemResponse, a, b);
  }
}

/**
 * @generated from message v7.backend.ListItemsRequest
 */
export class ListItemsRequest extends Message<ListItemsRequest> {
  /**
   * @generated from field: optional int32 limit = 1;
   */
  limit?: number;

  /**
   * @generated from field: optional int32 offset = 2;
   */
  offset?: number;

  /**
   * @generated from field: optional string search = 3;
   */
  search?: string;

  constructor(data?: PartialMessage<ListItemsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'v7.backend.ListItemsRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'limit', kind: 'scalar', T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 2, name: 'offset', kind: 'scalar', T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 3, name: 'search', kind: 'scalar', T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListItemsRequest {
    return new ListItemsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListItemsRequest {
    return new ListItemsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListItemsRequest {
    return new ListItemsRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: ListItemsRequest | PlainMessage<ListItemsRequest> | undefined,
    b: ListItemsRequest | PlainMessage<ListItemsRequest> | undefined
  ): boolean {
    return proto3.util.equals(ListItemsRequest, a, b);
  }
}

/**
 * @generated from message v7.backend.ListItemsResponse
 */
export class ListItemsResponse extends Message<ListItemsResponse> {
  /**
   * @generated from field: bool success = 1;
   */
  success = false;

  /**
   * @generated from field: string error = 2;
   */
  error = '';

  /**
   * @generated from field: repeated v7.backend.Item items = 3;
   */
  items: Item[] = [];

  /**
   * @generated from field: int32 total = 4;
   */
  total = 0;

  constructor(data?: PartialMessage<ListItemsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'v7.backend.ListItemsResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'success', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: 'error', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'items', kind: 'message', T: Item, repeated: true },
    { no: 4, name: 'total', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListItemsResponse {
    return new ListItemsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListItemsResponse {
    return new ListItemsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListItemsResponse {
    return new ListItemsResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: ListItemsResponse | PlainMessage<ListItemsResponse> | undefined,
    b: ListItemsResponse | PlainMessage<ListItemsResponse> | undefined
  ): boolean {
    return proto3.util.equals(ListItemsResponse, a, b);
  }
}

/**
 * @generated from message v7.backend.Item
 */
export class Item extends Message<Item> {
  /**
   * @generated from field: string id = 1;
   */
  id = '';

  /**
   * @generated from field: string name = 2;
   */
  name = '';

  /**
   * @generated from field: optional string description = 3;
   */
  description?: string;

  /**
   * @generated from field: int32 value = 4;
   */
  value = 0;

  /**
   * @generated from field: string created_at = 5;
   */
  createdAt = '';

  /**
   * @generated from field: string updated_at = 6;
   */
  updatedAt = '';

  constructor(data?: PartialMessage<Item>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'v7.backend.Item';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'name', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'description', kind: 'scalar', T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: 'value', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: 'created_at', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 6, name: 'updated_at', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Item {
    return new Item().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Item {
    return new Item().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Item {
    return new Item().fromJsonString(jsonString, options);
  }

  static equals(
    a: Item | PlainMessage<Item> | undefined,
    b: Item | PlainMessage<Item> | undefined
  ): boolean {
    return proto3.util.equals(Item, a, b);
  }
}

/**
 * 分析引擎代理消息
 *
 * @generated from message v7.backend.AnalyticsProxyRequest
 */
export class AnalyticsProxyRequest extends Message<AnalyticsProxyRequest> {
  /**
   * @generated from field: string algorithm = 1;
   */
  algorithm = '';

  /**
   * @generated from field: repeated double data = 2;
   */
  data: number[] = [];

  /**
   * @generated from field: map<string, string> parameters = 3;
   */
  parameters: { [key: string]: string } = {};

  constructor(data?: PartialMessage<AnalyticsProxyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'v7.backend.AnalyticsProxyRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'algorithm', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'data', kind: 'scalar', T: 1 /* ScalarType.DOUBLE */, repeated: true },
    {
      no: 3,
      name: 'parameters',
      kind: 'map',
      K: 9 /* ScalarType.STRING */,
      V: { kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): AnalyticsProxyRequest {
    return new AnalyticsProxyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnalyticsProxyRequest {
    return new AnalyticsProxyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): AnalyticsProxyRequest {
    return new AnalyticsProxyRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: AnalyticsProxyRequest | PlainMessage<AnalyticsProxyRequest> | undefined,
    b: AnalyticsProxyRequest | PlainMessage<AnalyticsProxyRequest> | undefined
  ): boolean {
    return proto3.util.equals(AnalyticsProxyRequest, a, b);
  }
}

/**
 * @generated from message v7.backend.AnalyticsProxyResponse
 */
export class AnalyticsProxyResponse extends Message<AnalyticsProxyResponse> {
  /**
   * JSON格式结果
   *
   * @generated from field: string result = 1;
   */
  result = '';

  /**
   * @generated from field: bool success = 2;
   */
  success = false;

  /**
   * @generated from field: string error = 3;
   */
  error = '';

  /**
   * @generated from field: map<string, double> metrics = 4;
   */
  metrics: { [key: string]: number } = {};

  constructor(data?: PartialMessage<AnalyticsProxyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'v7.backend.AnalyticsProxyResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'result', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'success', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: 'error', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    {
      no: 4,
      name: 'metrics',
      kind: 'map',
      K: 9 /* ScalarType.STRING */,
      V: { kind: 'scalar', T: 1 /* ScalarType.DOUBLE */ },
    },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): AnalyticsProxyResponse {
    return new AnalyticsProxyResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): AnalyticsProxyResponse {
    return new AnalyticsProxyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): AnalyticsProxyResponse {
    return new AnalyticsProxyResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: AnalyticsProxyResponse | PlainMessage<AnalyticsProxyResponse> | undefined,
    b: AnalyticsProxyResponse | PlainMessage<AnalyticsProxyResponse> | undefined
  ): boolean {
    return proto3.util.equals(AnalyticsProxyResponse, a, b);
  }
}

/**
 * MVP统计分析消息
 *
 * @generated from message v7.backend.StatisticsRequest
 */
export class StatisticsRequest extends Message<StatisticsRequest> {
  /**
   * @generated from oneof v7.backend.StatisticsRequest.request_type
   */
  requestType:
    | {
        /**
         * @generated from field: v7.backend.GenerateRandomDataRequest generate_data = 1;
         */
        value: GenerateRandomDataRequest;
        case: 'generateData';
      }
    | {
        /**
         * @generated from field: v7.backend.CalculateStatisticsRequest calculate_stats = 2;
         */
        value: CalculateStatisticsRequest;
        case: 'calculateStats';
      }
    | {
        /**
         * @generated from field: v7.backend.ComprehensiveAnalysisRequest comprehensive = 3;
         */
        value: ComprehensiveAnalysisRequest;
        case: 'comprehensive';
      }
    | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<StatisticsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'v7.backend.StatisticsRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'generate_data',
      kind: 'message',
      T: GenerateRandomDataRequest,
      oneof: 'request_type',
    },
    {
      no: 2,
      name: 'calculate_stats',
      kind: 'message',
      T: CalculateStatisticsRequest,
      oneof: 'request_type',
    },
    {
      no: 3,
      name: 'comprehensive',
      kind: 'message',
      T: ComprehensiveAnalysisRequest,
      oneof: 'request_type',
    },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StatisticsRequest {
    return new StatisticsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StatisticsRequest {
    return new StatisticsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StatisticsRequest {
    return new StatisticsRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: StatisticsRequest | PlainMessage<StatisticsRequest> | undefined,
    b: StatisticsRequest | PlainMessage<StatisticsRequest> | undefined
  ): boolean {
    return proto3.util.equals(StatisticsRequest, a, b);
  }
}

/**
 * @generated from message v7.backend.StatisticsResponse
 */
export class StatisticsResponse extends Message<StatisticsResponse> {
  /**
   * @generated from oneof v7.backend.StatisticsResponse.response_type
   */
  responseType:
    | {
        /**
         * @generated from field: v7.backend.GenerateRandomDataResponse data_response = 1;
         */
        value: GenerateRandomDataResponse;
        case: 'dataResponse';
      }
    | {
        /**
         * @generated from field: v7.backend.CalculateStatisticsResponse stats_response = 2;
         */
        value: CalculateStatisticsResponse;
        case: 'statsResponse';
      }
    | {
        /**
         * @generated from field: v7.backend.ComprehensiveAnalysisResponse comprehensive_response = 3;
         */
        value: ComprehensiveAnalysisResponse;
        case: 'comprehensiveResponse';
      }
    | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from field: bool success = 4;
   */
  success = false;

  /**
   * @generated from field: string error = 5;
   */
  error = '';

  constructor(data?: PartialMessage<StatisticsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'v7.backend.StatisticsResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'data_response',
      kind: 'message',
      T: GenerateRandomDataResponse,
      oneof: 'response_type',
    },
    {
      no: 2,
      name: 'stats_response',
      kind: 'message',
      T: CalculateStatisticsResponse,
      oneof: 'response_type',
    },
    {
      no: 3,
      name: 'comprehensive_response',
      kind: 'message',
      T: ComprehensiveAnalysisResponse,
      oneof: 'response_type',
    },
    { no: 4, name: 'success', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: 'error', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StatisticsResponse {
    return new StatisticsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StatisticsResponse {
    return new StatisticsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): StatisticsResponse {
    return new StatisticsResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: StatisticsResponse | PlainMessage<StatisticsResponse> | undefined,
    b: StatisticsResponse | PlainMessage<StatisticsResponse> | undefined
  ): boolean {
    return proto3.util.equals(StatisticsResponse, a, b);
  }
}

/**
 * @generated from message v7.backend.GenerateRandomDataRequest
 */
export class GenerateRandomDataRequest extends Message<GenerateRandomDataRequest> {
  /**
   * @generated from field: optional uint32 count = 1;
   */
  count?: number;

  /**
   * @generated from field: optional uint64 seed = 2;
   */
  seed?: bigint;

  /**
   * @generated from field: optional double min_value = 3;
   */
  minValue?: number;

  /**
   * @generated from field: optional double max_value = 4;
   */
  maxValue?: number;

  /**
   * @generated from field: optional string distribution = 5;
   */
  distribution?: string;

  constructor(data?: PartialMessage<GenerateRandomDataRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'v7.backend.GenerateRandomDataRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'count', kind: 'scalar', T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 2, name: 'seed', kind: 'scalar', T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 3, name: 'min_value', kind: 'scalar', T: 1 /* ScalarType.DOUBLE */, opt: true },
    { no: 4, name: 'max_value', kind: 'scalar', T: 1 /* ScalarType.DOUBLE */, opt: true },
    { no: 5, name: 'distribution', kind: 'scalar', T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): GenerateRandomDataRequest {
    return new GenerateRandomDataRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): GenerateRandomDataRequest {
    return new GenerateRandomDataRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): GenerateRandomDataRequest {
    return new GenerateRandomDataRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: GenerateRandomDataRequest | PlainMessage<GenerateRandomDataRequest> | undefined,
    b: GenerateRandomDataRequest | PlainMessage<GenerateRandomDataRequest> | undefined
  ): boolean {
    return proto3.util.equals(GenerateRandomDataRequest, a, b);
  }
}

/**
 * @generated from message v7.backend.GenerateRandomDataResponse
 */
export class GenerateRandomDataResponse extends Message<GenerateRandomDataResponse> {
  /**
   * @generated from field: repeated double data = 1;
   */
  data: number[] = [];

  /**
   * @generated from field: uint32 count = 2;
   */
  count = 0;

  /**
   * @generated from field: uint64 seed = 3;
   */
  seed = protoInt64.zero;

  /**
   * @generated from field: string generated_at = 4;
   */
  generatedAt = '';

  /**
   * @generated from field: v7.backend.PerformanceInfo performance = 5;
   */
  performance?: PerformanceInfo;

  constructor(data?: PartialMessage<GenerateRandomDataResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'v7.backend.GenerateRandomDataResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'data', kind: 'scalar', T: 1 /* ScalarType.DOUBLE */, repeated: true },
    { no: 2, name: 'count', kind: 'scalar', T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: 'seed', kind: 'scalar', T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: 'generated_at', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 5, name: 'performance', kind: 'message', T: PerformanceInfo },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): GenerateRandomDataResponse {
    return new GenerateRandomDataResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): GenerateRandomDataResponse {
    return new GenerateRandomDataResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): GenerateRandomDataResponse {
    return new GenerateRandomDataResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: GenerateRandomDataResponse | PlainMessage<GenerateRandomDataResponse> | undefined,
    b: GenerateRandomDataResponse | PlainMessage<GenerateRandomDataResponse> | undefined
  ): boolean {
    return proto3.util.equals(GenerateRandomDataResponse, a, b);
  }
}

/**
 * @generated from message v7.backend.CalculateStatisticsRequest
 */
export class CalculateStatisticsRequest extends Message<CalculateStatisticsRequest> {
  /**
   * @generated from field: repeated double data = 1;
   */
  data: number[] = [];

  /**
   * @generated from field: repeated string statistics = 2;
   */
  statistics: string[] = [];

  /**
   * @generated from field: repeated double percentiles = 3;
   */
  percentiles: number[] = [];

  /**
   * @generated from field: optional bool use_analytics_engine = 4;
   */
  useAnalyticsEngine?: boolean;

  /**
   * @generated from field: optional bool prefer_rust = 5;
   */
  preferRust?: boolean;

  constructor(data?: PartialMessage<CalculateStatisticsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'v7.backend.CalculateStatisticsRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'data', kind: 'scalar', T: 1 /* ScalarType.DOUBLE */, repeated: true },
    { no: 2, name: 'statistics', kind: 'scalar', T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: 'percentiles', kind: 'scalar', T: 1 /* ScalarType.DOUBLE */, repeated: true },
    { no: 4, name: 'use_analytics_engine', kind: 'scalar', T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 5, name: 'prefer_rust', kind: 'scalar', T: 8 /* ScalarType.BOOL */, opt: true },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): CalculateStatisticsRequest {
    return new CalculateStatisticsRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): CalculateStatisticsRequest {
    return new CalculateStatisticsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): CalculateStatisticsRequest {
    return new CalculateStatisticsRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: CalculateStatisticsRequest | PlainMessage<CalculateStatisticsRequest> | undefined,
    b: CalculateStatisticsRequest | PlainMessage<CalculateStatisticsRequest> | undefined
  ): boolean {
    return proto3.util.equals(CalculateStatisticsRequest, a, b);
  }
}

/**
 * @generated from message v7.backend.CalculateStatisticsResponse
 */
export class CalculateStatisticsResponse extends Message<CalculateStatisticsResponse> {
  /**
   * @generated from field: v7.backend.StatisticsResult results = 1;
   */
  results?: StatisticsResult;

  /**
   * @generated from field: v7.backend.PerformanceInfo performance = 2;
   */
  performance?: PerformanceInfo;

  /**
   * @generated from field: string implementation = 3;
   */
  implementation = '';

  constructor(data?: PartialMessage<CalculateStatisticsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'v7.backend.CalculateStatisticsResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'results', kind: 'message', T: StatisticsResult },
    { no: 2, name: 'performance', kind: 'message', T: PerformanceInfo },
    { no: 3, name: 'implementation', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): CalculateStatisticsResponse {
    return new CalculateStatisticsResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): CalculateStatisticsResponse {
    return new CalculateStatisticsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): CalculateStatisticsResponse {
    return new CalculateStatisticsResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: CalculateStatisticsResponse | PlainMessage<CalculateStatisticsResponse> | undefined,
    b: CalculateStatisticsResponse | PlainMessage<CalculateStatisticsResponse> | undefined
  ): boolean {
    return proto3.util.equals(CalculateStatisticsResponse, a, b);
  }
}

/**
 * @generated from message v7.backend.ComprehensiveAnalysisRequest
 */
export class ComprehensiveAnalysisRequest extends Message<ComprehensiveAnalysisRequest> {
  /**
   * @generated from field: v7.backend.GenerateRandomDataRequest data_config = 1;
   */
  dataConfig?: GenerateRandomDataRequest;

  /**
   * @generated from field: v7.backend.CalculateStatisticsRequest stats_config = 2;
   */
  statsConfig?: CalculateStatisticsRequest;

  constructor(data?: PartialMessage<ComprehensiveAnalysisRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'v7.backend.ComprehensiveAnalysisRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'data_config', kind: 'message', T: GenerateRandomDataRequest },
    { no: 2, name: 'stats_config', kind: 'message', T: CalculateStatisticsRequest },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): ComprehensiveAnalysisRequest {
    return new ComprehensiveAnalysisRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): ComprehensiveAnalysisRequest {
    return new ComprehensiveAnalysisRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): ComprehensiveAnalysisRequest {
    return new ComprehensiveAnalysisRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: ComprehensiveAnalysisRequest | PlainMessage<ComprehensiveAnalysisRequest> | undefined,
    b: ComprehensiveAnalysisRequest | PlainMessage<ComprehensiveAnalysisRequest> | undefined
  ): boolean {
    return proto3.util.equals(ComprehensiveAnalysisRequest, a, b);
  }
}

/**
 * @generated from message v7.backend.ComprehensiveAnalysisResponse
 */
export class ComprehensiveAnalysisResponse extends Message<ComprehensiveAnalysisResponse> {
  /**
   * @generated from field: v7.backend.DataSummary data_summary = 1;
   */
  dataSummary?: DataSummary;

  /**
   * @generated from field: v7.backend.StatisticsResult statistics = 2;
   */
  statistics?: StatisticsResult;

  /**
   * @generated from field: v7.backend.PerformanceInfo performance = 3;
   */
  performance?: PerformanceInfo;

  /**
   * @generated from field: string analyzed_at = 4;
   */
  analyzedAt = '';

  constructor(data?: PartialMessage<ComprehensiveAnalysisResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'v7.backend.ComprehensiveAnalysisResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'data_summary', kind: 'message', T: DataSummary },
    { no: 2, name: 'statistics', kind: 'message', T: StatisticsResult },
    { no: 3, name: 'performance', kind: 'message', T: PerformanceInfo },
    { no: 4, name: 'analyzed_at', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): ComprehensiveAnalysisResponse {
    return new ComprehensiveAnalysisResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): ComprehensiveAnalysisResponse {
    return new ComprehensiveAnalysisResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): ComprehensiveAnalysisResponse {
    return new ComprehensiveAnalysisResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: ComprehensiveAnalysisResponse | PlainMessage<ComprehensiveAnalysisResponse> | undefined,
    b: ComprehensiveAnalysisResponse | PlainMessage<ComprehensiveAnalysisResponse> | undefined
  ): boolean {
    return proto3.util.equals(ComprehensiveAnalysisResponse, a, b);
  }
}

/**
 * @generated from message v7.backend.DataSummary
 */
export class DataSummary extends Message<DataSummary> {
  /**
   * @generated from field: uint32 count = 1;
   */
  count = 0;

  /**
   * @generated from field: uint64 seed = 2;
   */
  seed = protoInt64.zero;

  /**
   * @generated from field: v7.backend.DataRange range = 3;
   */
  range?: DataRange;

  /**
   * @generated from field: string distribution = 4;
   */
  distribution = '';

  /**
   * @generated from field: repeated double preview = 5;
   */
  preview: number[] = [];

  constructor(data?: PartialMessage<DataSummary>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'v7.backend.DataSummary';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'count', kind: 'scalar', T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: 'seed', kind: 'scalar', T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: 'range', kind: 'message', T: DataRange },
    { no: 4, name: 'distribution', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 5, name: 'preview', kind: 'scalar', T: 1 /* ScalarType.DOUBLE */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DataSummary {
    return new DataSummary().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DataSummary {
    return new DataSummary().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DataSummary {
    return new DataSummary().fromJsonString(jsonString, options);
  }

  static equals(
    a: DataSummary | PlainMessage<DataSummary> | undefined,
    b: DataSummary | PlainMessage<DataSummary> | undefined
  ): boolean {
    return proto3.util.equals(DataSummary, a, b);
  }
}

/**
 * @generated from message v7.backend.DataRange
 */
export class DataRange extends Message<DataRange> {
  /**
   * @generated from field: double min = 1;
   */
  min = 0;

  /**
   * @generated from field: double max = 2;
   */
  max = 0;

  constructor(data?: PartialMessage<DataRange>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'v7.backend.DataRange';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'min', kind: 'scalar', T: 1 /* ScalarType.DOUBLE */ },
    { no: 2, name: 'max', kind: 'scalar', T: 1 /* ScalarType.DOUBLE */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DataRange {
    return new DataRange().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DataRange {
    return new DataRange().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DataRange {
    return new DataRange().fromJsonString(jsonString, options);
  }

  static equals(
    a: DataRange | PlainMessage<DataRange> | undefined,
    b: DataRange | PlainMessage<DataRange> | undefined
  ): boolean {
    return proto3.util.equals(DataRange, a, b);
  }
}

/**
 * @generated from message v7.backend.StatisticsResult
 */
export class StatisticsResult extends Message<StatisticsResult> {
  /**
   * @generated from field: v7.backend.BasicStatistics basic = 1;
   */
  basic?: BasicStatistics;

  /**
   * @generated from field: v7.backend.DistributionStatistics distribution = 2;
   */
  distribution?: DistributionStatistics;

  /**
   * @generated from field: v7.backend.PercentileInfo percentiles = 3;
   */
  percentiles?: PercentileInfo;

  /**
   * @generated from field: v7.backend.ShapeStatistics shape = 4;
   */
  shape?: ShapeStatistics;

  constructor(data?: PartialMessage<StatisticsResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'v7.backend.StatisticsResult';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'basic', kind: 'message', T: BasicStatistics },
    { no: 2, name: 'distribution', kind: 'message', T: DistributionStatistics },
    { no: 3, name: 'percentiles', kind: 'message', T: PercentileInfo },
    { no: 4, name: 'shape', kind: 'message', T: ShapeStatistics },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StatisticsResult {
    return new StatisticsResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StatisticsResult {
    return new StatisticsResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StatisticsResult {
    return new StatisticsResult().fromJsonString(jsonString, options);
  }

  static equals(
    a: StatisticsResult | PlainMessage<StatisticsResult> | undefined,
    b: StatisticsResult | PlainMessage<StatisticsResult> | undefined
  ): boolean {
    return proto3.util.equals(StatisticsResult, a, b);
  }
}

/**
 * @generated from message v7.backend.BasicStatistics
 */
export class BasicStatistics extends Message<BasicStatistics> {
  /**
   * @generated from field: uint32 count = 1;
   */
  count = 0;

  /**
   * @generated from field: double sum = 2;
   */
  sum = 0;

  /**
   * @generated from field: double mean = 3;
   */
  mean = 0;

  /**
   * @generated from field: double min = 4;
   */
  min = 0;

  /**
   * @generated from field: double max = 5;
   */
  max = 0;

  /**
   * @generated from field: double range = 6;
   */
  range = 0;

  constructor(data?: PartialMessage<BasicStatistics>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'v7.backend.BasicStatistics';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'count', kind: 'scalar', T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: 'sum', kind: 'scalar', T: 1 /* ScalarType.DOUBLE */ },
    { no: 3, name: 'mean', kind: 'scalar', T: 1 /* ScalarType.DOUBLE */ },
    { no: 4, name: 'min', kind: 'scalar', T: 1 /* ScalarType.DOUBLE */ },
    { no: 5, name: 'max', kind: 'scalar', T: 1 /* ScalarType.DOUBLE */ },
    { no: 6, name: 'range', kind: 'scalar', T: 1 /* ScalarType.DOUBLE */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BasicStatistics {
    return new BasicStatistics().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BasicStatistics {
    return new BasicStatistics().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BasicStatistics {
    return new BasicStatistics().fromJsonString(jsonString, options);
  }

  static equals(
    a: BasicStatistics | PlainMessage<BasicStatistics> | undefined,
    b: BasicStatistics | PlainMessage<BasicStatistics> | undefined
  ): boolean {
    return proto3.util.equals(BasicStatistics, a, b);
  }
}

/**
 * @generated from message v7.backend.DistributionStatistics
 */
export class DistributionStatistics extends Message<DistributionStatistics> {
  /**
   * @generated from field: double median = 1;
   */
  median = 0;

  /**
   * @generated from field: repeated double mode = 2;
   */
  mode: number[] = [];

  /**
   * @generated from field: double variance = 3;
   */
  variance = 0;

  /**
   * @generated from field: double std_dev = 4;
   */
  stdDev = 0;

  /**
   * @generated from field: double iqr = 5;
   */
  iqr = 0;

  constructor(data?: PartialMessage<DistributionStatistics>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'v7.backend.DistributionStatistics';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'median', kind: 'scalar', T: 1 /* ScalarType.DOUBLE */ },
    { no: 2, name: 'mode', kind: 'scalar', T: 1 /* ScalarType.DOUBLE */, repeated: true },
    { no: 3, name: 'variance', kind: 'scalar', T: 1 /* ScalarType.DOUBLE */ },
    { no: 4, name: 'std_dev', kind: 'scalar', T: 1 /* ScalarType.DOUBLE */ },
    { no: 5, name: 'iqr', kind: 'scalar', T: 1 /* ScalarType.DOUBLE */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): DistributionStatistics {
    return new DistributionStatistics().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): DistributionStatistics {
    return new DistributionStatistics().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): DistributionStatistics {
    return new DistributionStatistics().fromJsonString(jsonString, options);
  }

  static equals(
    a: DistributionStatistics | PlainMessage<DistributionStatistics> | undefined,
    b: DistributionStatistics | PlainMessage<DistributionStatistics> | undefined
  ): boolean {
    return proto3.util.equals(DistributionStatistics, a, b);
  }
}

/**
 * @generated from message v7.backend.PercentileInfo
 */
export class PercentileInfo extends Message<PercentileInfo> {
  /**
   * @generated from field: double q1 = 1;
   */
  q1 = 0;

  /**
   * @generated from field: double q2 = 2;
   */
  q2 = 0;

  /**
   * @generated from field: double q3 = 3;
   */
  q3 = 0;

  /**
   * @generated from field: map<string, double> custom = 4;
   */
  custom: { [key: string]: number } = {};

  constructor(data?: PartialMessage<PercentileInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'v7.backend.PercentileInfo';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'q1', kind: 'scalar', T: 1 /* ScalarType.DOUBLE */ },
    { no: 2, name: 'q2', kind: 'scalar', T: 1 /* ScalarType.DOUBLE */ },
    { no: 3, name: 'q3', kind: 'scalar', T: 1 /* ScalarType.DOUBLE */ },
    {
      no: 4,
      name: 'custom',
      kind: 'map',
      K: 9 /* ScalarType.STRING */,
      V: { kind: 'scalar', T: 1 /* ScalarType.DOUBLE */ },
    },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PercentileInfo {
    return new PercentileInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PercentileInfo {
    return new PercentileInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PercentileInfo {
    return new PercentileInfo().fromJsonString(jsonString, options);
  }

  static equals(
    a: PercentileInfo | PlainMessage<PercentileInfo> | undefined,
    b: PercentileInfo | PlainMessage<PercentileInfo> | undefined
  ): boolean {
    return proto3.util.equals(PercentileInfo, a, b);
  }
}

/**
 * @generated from message v7.backend.ShapeStatistics
 */
export class ShapeStatistics extends Message<ShapeStatistics> {
  /**
   * @generated from field: double skewness = 1;
   */
  skewness = 0;

  /**
   * @generated from field: double kurtosis = 2;
   */
  kurtosis = 0;

  /**
   * @generated from field: string distribution_shape = 3;
   */
  distributionShape = '';

  constructor(data?: PartialMessage<ShapeStatistics>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'v7.backend.ShapeStatistics';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'skewness', kind: 'scalar', T: 1 /* ScalarType.DOUBLE */ },
    { no: 2, name: 'kurtosis', kind: 'scalar', T: 1 /* ScalarType.DOUBLE */ },
    { no: 3, name: 'distribution_shape', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ShapeStatistics {
    return new ShapeStatistics().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ShapeStatistics {
    return new ShapeStatistics().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ShapeStatistics {
    return new ShapeStatistics().fromJsonString(jsonString, options);
  }

  static equals(
    a: ShapeStatistics | PlainMessage<ShapeStatistics> | undefined,
    b: ShapeStatistics | PlainMessage<ShapeStatistics> | undefined
  ): boolean {
    return proto3.util.equals(ShapeStatistics, a, b);
  }
}

/**
 * @generated from message v7.backend.PerformanceInfo
 */
export class PerformanceInfo extends Message<PerformanceInfo> {
  /**
   * @generated from field: uint64 execution_time_ms = 1;
   */
  executionTimeMs = protoInt64.zero;

  /**
   * @generated from field: optional uint64 memory_usage_bytes = 2;
   */
  memoryUsageBytes?: bigint;

  /**
   * @generated from field: string implementation = 3;
   */
  implementation = '';

  /**
   * @generated from field: map<string, string> metrics = 4;
   */
  metrics: { [key: string]: string } = {};

  constructor(data?: PartialMessage<PerformanceInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'v7.backend.PerformanceInfo';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'execution_time_ms', kind: 'scalar', T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: 'memory_usage_bytes', kind: 'scalar', T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 3, name: 'implementation', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    {
      no: 4,
      name: 'metrics',
      kind: 'map',
      K: 9 /* ScalarType.STRING */,
      V: { kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PerformanceInfo {
    return new PerformanceInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PerformanceInfo {
    return new PerformanceInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PerformanceInfo {
    return new PerformanceInfo().fromJsonString(jsonString, options);
  }

  static equals(
    a: PerformanceInfo | PlainMessage<PerformanceInfo> | undefined,
    b: PerformanceInfo | PlainMessage<PerformanceInfo> | undefined
  ): boolean {
    return proto3.util.equals(PerformanceInfo, a, b);
  }
}
