// @generated by protoc-gen-es v1.10.1 with parameter "target=ts,import_extension=none,ts_nocheck=false"
// @generated from file analytics.proto (package analytics, syntax proto3)
/* eslint-disable */

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from '@bufbuild/protobuf';
import { Message, proto3, protoInt64 } from '@bufbuild/protobuf';

/**
 * 分析请求
 *
 * @generated from message analytics.AnalysisRequest
 */
export class AnalysisRequest extends Message<AnalysisRequest> {
  /**
   * @generated from field: string request_id = 1;
   */
  requestId = '';

  /**
   * @generated from field: string algorithm = 2;
   */
  algorithm = '';

  /**
   * @generated from field: repeated double data = 3;
   */
  data: number[] = [];

  /**
   * @generated from field: map<string, string> params = 4;
   */
  params: { [key: string]: string } = {};

  /**
   * @generated from field: analytics.AnalysisOptions options = 5;
   */
  options?: AnalysisOptions;

  constructor(data?: PartialMessage<AnalysisRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'analytics.AnalysisRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'request_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'algorithm', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'data', kind: 'scalar', T: 1 /* ScalarType.DOUBLE */, repeated: true },
    {
      no: 4,
      name: 'params',
      kind: 'map',
      K: 9 /* ScalarType.STRING */,
      V: { kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    },
    { no: 5, name: 'options', kind: 'message', T: AnalysisOptions },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnalysisRequest {
    return new AnalysisRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnalysisRequest {
    return new AnalysisRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnalysisRequest {
    return new AnalysisRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: AnalysisRequest | PlainMessage<AnalysisRequest> | undefined,
    b: AnalysisRequest | PlainMessage<AnalysisRequest> | undefined
  ): boolean {
    return proto3.util.equals(AnalysisRequest, a, b);
  }
}

/**
 * 批量分析请求
 *
 * @generated from message analytics.BatchAnalysisRequest
 */
export class BatchAnalysisRequest extends Message<BatchAnalysisRequest> {
  /**
   * @generated from field: string batch_id = 1;
   */
  batchId = '';

  /**
   * @generated from field: repeated analytics.AnalysisRequest requests = 2;
   */
  requests: AnalysisRequest[] = [];

  constructor(data?: PartialMessage<BatchAnalysisRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'analytics.BatchAnalysisRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'batch_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'requests', kind: 'message', T: AnalysisRequest, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BatchAnalysisRequest {
    return new BatchAnalysisRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BatchAnalysisRequest {
    return new BatchAnalysisRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): BatchAnalysisRequest {
    return new BatchAnalysisRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: BatchAnalysisRequest | PlainMessage<BatchAnalysisRequest> | undefined,
    b: BatchAnalysisRequest | PlainMessage<BatchAnalysisRequest> | undefined
  ): boolean {
    return proto3.util.equals(BatchAnalysisRequest, a, b);
  }
}

/**
 * 分析选项
 *
 * @generated from message analytics.AnalysisOptions
 */
export class AnalysisOptions extends Message<AnalysisOptions> {
  /**
   * 优先使用Rust实现
   *
   * @generated from field: bool prefer_rust = 1;
   */
  preferRust = false;

  /**
   * 允许Python实现
   *
   * @generated from field: bool allow_python = 2;
   */
  allowPython = false;

  /**
   * 超时时间(毫秒)
   *
   * @generated from field: int32 timeout_ms = 3;
   */
  timeoutMs = 0;

  /**
   * 包含执行元数据
   *
   * @generated from field: bool include_metadata = 4;
   */
  includeMetadata = false;

  constructor(data?: PartialMessage<AnalysisOptions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'analytics.AnalysisOptions';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'prefer_rust', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: 'allow_python', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: 'timeout_ms', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: 'include_metadata', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnalysisOptions {
    return new AnalysisOptions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnalysisOptions {
    return new AnalysisOptions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnalysisOptions {
    return new AnalysisOptions().fromJsonString(jsonString, options);
  }

  static equals(
    a: AnalysisOptions | PlainMessage<AnalysisOptions> | undefined,
    b: AnalysisOptions | PlainMessage<AnalysisOptions> | undefined
  ): boolean {
    return proto3.util.equals(AnalysisOptions, a, b);
  }
}

/**
 * 分析响应
 *
 * @generated from message analytics.AnalysisResponse
 */
export class AnalysisResponse extends Message<AnalysisResponse> {
  /**
   * @generated from field: string request_id = 1;
   */
  requestId = '';

  /**
   * @generated from field: bool success = 2;
   */
  success = false;

  /**
   * @generated from field: string error_message = 3;
   */
  errorMessage = '';

  /**
   * 结果数据(JSON格式)
   *
   * @generated from field: string result_json = 4;
   */
  resultJson = '';

  /**
   * 执行元数据
   *
   * @generated from field: analytics.ExecutionMetadata metadata = 5;
   */
  metadata?: ExecutionMetadata;

  constructor(data?: PartialMessage<AnalysisResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'analytics.AnalysisResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'request_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'success', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: 'error_message', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 4, name: 'result_json', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 5, name: 'metadata', kind: 'message', T: ExecutionMetadata },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnalysisResponse {
    return new AnalysisResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnalysisResponse {
    return new AnalysisResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnalysisResponse {
    return new AnalysisResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: AnalysisResponse | PlainMessage<AnalysisResponse> | undefined,
    b: AnalysisResponse | PlainMessage<AnalysisResponse> | undefined
  ): boolean {
    return proto3.util.equals(AnalysisResponse, a, b);
  }
}

/**
 * 执行元数据
 *
 * @generated from message analytics.ExecutionMetadata
 */
export class ExecutionMetadata extends Message<ExecutionMetadata> {
  /**
   * "rust" or "python"
   *
   * @generated from field: string implementation = 1;
   */
  implementation = '';

  /**
   * 执行时间
   *
   * @generated from field: int64 execution_time_ms = 2;
   */
  executionTimeMs = protoInt64.zero;

  /**
   * 使用的算法
   *
   * @generated from field: string algorithm = 3;
   */
  algorithm = '';

  /**
   * 数据大小
   *
   * @generated from field: int32 data_size = 4;
   */
  dataSize = 0;

  /**
   * 额外统计信息
   *
   * @generated from field: map<string, string> stats = 5;
   */
  stats: { [key: string]: string } = {};

  constructor(data?: PartialMessage<ExecutionMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'analytics.ExecutionMetadata';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'implementation', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'execution_time_ms', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: 'algorithm', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 4, name: 'data_size', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    {
      no: 5,
      name: 'stats',
      kind: 'map',
      K: 9 /* ScalarType.STRING */,
      V: { kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExecutionMetadata {
    return new ExecutionMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExecutionMetadata {
    return new ExecutionMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExecutionMetadata {
    return new ExecutionMetadata().fromJsonString(jsonString, options);
  }

  static equals(
    a: ExecutionMetadata | PlainMessage<ExecutionMetadata> | undefined,
    b: ExecutionMetadata | PlainMessage<ExecutionMetadata> | undefined
  ): boolean {
    return proto3.util.equals(ExecutionMetadata, a, b);
  }
}

/**
 * 健康检查
 *
 * @generated from message analytics.HealthCheckRequest
 */
export class HealthCheckRequest extends Message<HealthCheckRequest> {
  constructor(data?: PartialMessage<HealthCheckRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'analytics.HealthCheckRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => []);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HealthCheckRequest {
    return new HealthCheckRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HealthCheckRequest {
    return new HealthCheckRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): HealthCheckRequest {
    return new HealthCheckRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: HealthCheckRequest | PlainMessage<HealthCheckRequest> | undefined,
    b: HealthCheckRequest | PlainMessage<HealthCheckRequest> | undefined
  ): boolean {
    return proto3.util.equals(HealthCheckRequest, a, b);
  }
}

/**
 * @generated from message analytics.HealthCheckResponse
 */
export class HealthCheckResponse extends Message<HealthCheckResponse> {
  /**
   * @generated from field: bool healthy = 1;
   */
  healthy = false;

  /**
   * @generated from field: string version = 2;
   */
  version = '';

  /**
   * @generated from field: map<string, string> capabilities = 3;
   */
  capabilities: { [key: string]: string } = {};

  constructor(data?: PartialMessage<HealthCheckResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'analytics.HealthCheckResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'healthy', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: 'version', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    {
      no: 3,
      name: 'capabilities',
      kind: 'map',
      K: 9 /* ScalarType.STRING */,
      V: { kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HealthCheckResponse {
    return new HealthCheckResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HealthCheckResponse {
    return new HealthCheckResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): HealthCheckResponse {
    return new HealthCheckResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: HealthCheckResponse | PlainMessage<HealthCheckResponse> | undefined,
    b: HealthCheckResponse | PlainMessage<HealthCheckResponse> | undefined
  ): boolean {
    return proto3.util.equals(HealthCheckResponse, a, b);
  }
}

/**
 * 支持的算法
 *
 * @generated from message analytics.Empty
 */
export class Empty extends Message<Empty> {
  constructor(data?: PartialMessage<Empty>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'analytics.Empty';
  static readonly fields: FieldList = proto3.util.newFieldList(() => []);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Empty {
    return new Empty().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Empty {
    return new Empty().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Empty {
    return new Empty().fromJsonString(jsonString, options);
  }

  static equals(
    a: Empty | PlainMessage<Empty> | undefined,
    b: Empty | PlainMessage<Empty> | undefined
  ): boolean {
    return proto3.util.equals(Empty, a, b);
  }
}

/**
 * @generated from message analytics.SupportedAlgorithmsResponse
 */
export class SupportedAlgorithmsResponse extends Message<SupportedAlgorithmsResponse> {
  /**
   * @generated from field: repeated analytics.AlgorithmInfo algorithms = 1;
   */
  algorithms: AlgorithmInfo[] = [];

  constructor(data?: PartialMessage<SupportedAlgorithmsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'analytics.SupportedAlgorithmsResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'algorithms', kind: 'message', T: AlgorithmInfo, repeated: true },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): SupportedAlgorithmsResponse {
    return new SupportedAlgorithmsResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): SupportedAlgorithmsResponse {
    return new SupportedAlgorithmsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): SupportedAlgorithmsResponse {
    return new SupportedAlgorithmsResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: SupportedAlgorithmsResponse | PlainMessage<SupportedAlgorithmsResponse> | undefined,
    b: SupportedAlgorithmsResponse | PlainMessage<SupportedAlgorithmsResponse> | undefined
  ): boolean {
    return proto3.util.equals(SupportedAlgorithmsResponse, a, b);
  }
}

/**
 * @generated from message analytics.AlgorithmInfo
 */
export class AlgorithmInfo extends Message<AlgorithmInfo> {
  /**
   * @generated from field: string name = 1;
   */
  name = '';

  /**
   * @generated from field: string description = 2;
   */
  description = '';

  /**
   * ["rust", "python"]
   *
   * @generated from field: repeated string implementations = 3;
   */
  implementations: string[] = [];

  /**
   * @generated from field: repeated string required_params = 4;
   */
  requiredParams: string[] = [];

  /**
   * @generated from field: repeated string optional_params = 5;
   */
  optionalParams: string[] = [];

  constructor(data?: PartialMessage<AlgorithmInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'analytics.AlgorithmInfo';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'name', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'description', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    {
      no: 3,
      name: 'implementations',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      repeated: true,
    },
    {
      no: 4,
      name: 'required_params',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      repeated: true,
    },
    {
      no: 5,
      name: 'optional_params',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      repeated: true,
    },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AlgorithmInfo {
    return new AlgorithmInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AlgorithmInfo {
    return new AlgorithmInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AlgorithmInfo {
    return new AlgorithmInfo().fromJsonString(jsonString, options);
  }

  static equals(
    a: AlgorithmInfo | PlainMessage<AlgorithmInfo> | undefined,
    b: AlgorithmInfo | PlainMessage<AlgorithmInfo> | undefined
  ): boolean {
    return proto3.util.equals(AlgorithmInfo, a, b);
  }
}
