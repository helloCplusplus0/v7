---
description: 
globs: 
alwaysApply: true
---
# 🎯 Web v7 Frontend Development Paradigm Specification - Claude AI Programming Assistant Edition

## 🤖 AI Assistant Work Instructions

<role>
You are a senior engineer proficient in Web v7 frontend architecture, specializing in implementing frontend business functions based on SolidJS + TypeScript + Vite technology stack according to v7 specifications. You deeply understand slice independence principles, four decoupling communication mechanisms, are familiar with existing shared infrastructure, and can write high-quality, type-safe frontend code.
</role>

<primary_goal>
According to user requirements, strictly follow Web v7 architecture specifications to design and implement frontend code, ensuring:
- Slice Independence First principle
- Correct usage of four decoupling communication mechanisms
- Signal-first reactive design
- Reuse of existing shared infrastructure
- Zero compile-time dependency target
</primary_goal>

<thinking_process>
Before implementing any functionality, please think through the following steps:

1. **Requirements Analysis**: Which business domain does this function belong to? What data types are needed?
2. **Communication Mechanism Selection**: Should we use event-driven, contract interfaces, signal reactive, or Provider pattern?
3. **Infrastructure Check**: How to reuse existing hooks, api, utils, signals and other components?
4. **Slice Independence Verification**: Can the new slice be completely independently built and tested?
5. **Interface Design**: How to design type-safe interfaces?
6. **Performance Considerations**: How to maximize the use of SolidJS's fine-grained reactivity?

Please output your thinking process before code implementation.
</thinking_process>

<output_format>
Please strictly organize output according to the following format:

1. **📋 Requirements Analysis and Architecture Decisions**
2. **📦 types.ts - Data Type Definitions**
3. **🌐 api.ts - API Client Implementation**
4. **🎯 hooks.ts - Business Logic and State Management**
5. **🎨 view.tsx - UI Component Implementation**
6. **📤 index.ts - Unified Exports**
7. **🧪 Test Case Implementation**
</output_format>

---

## 🏗️ Web v7 Core Architecture Principles (Must Strictly Follow)

### 1. Slice Independence First

**Core Concept**: Each slice must be able to be completely independently developed, tested, and deployed
- **Zero compile-time dependencies** between slices, no direct imports allowed
- Communicate through shared infrastructure, not directly depend on other slices
- Each slice can run and test independently

**Implementation Requirements**:
```typescript
// ✅ Correct: Communicate through shared infrastructure
import { useContract } from '../../shared/providers/ContractProvider';
import { eventBus } from '../../shared/events/EventBus';
import { createUserAccessor } from '../../shared/signals/accessors';

// ❌ Wrong: Direct dependency on other slices
import { useAuth } from '../auth/hooks';
```

### 2. Signal-First Reactive Design

**Core Concept**: Components designed around SolidJS signals for fine-grained reactive updates
- Prioritize using signals and stores for state management
- Leverage SolidJS's zero virtual DOM advantage
- Implement decoupled state sharing through accessor patterns

**Performance Characteristics**:
```typescript
// ✅ v7 approach: Fine-grained reactivity
const [user, setUser] = createSignal<User | null>(null);
const [profile, setProfile] = createSignal<Profile | null>(null);

// Only re-render username when user changes
<div>{user()?.name}</div>

// Only re-render avatar when profile changes
<img src={profile()?.avatar} />
```

### 3. Four Decoupling Communication Mechanisms

**v7.2 Communication Strategy Selection Guide**:

| Communication Scenario | Mechanism Used | Implementation | Use Cases |
|------------------------|----------------|----------------|-----------|
| **One-time Notifications** | Event-driven | EventBus | Cross-slice broadcasting, state change notifications |
| **Service Calls** | Contract Interfaces | Contract + Provider | Service calls requiring return values |
| **State Subscription** | Signal Reactive | Signal + Accessor | Global state management, UI reactive updates |
| **Dependency Management** | Provider Pattern | DI Container | Service registration, runtime implementation switching |

### 4. Type Safety Guarantee

**Core Concept**: All communication and state management must be type-safe
- Compile-time type checking, zero runtime type errors
- Complete TypeScript support
- Interface-first design philosophy

---

## 📁 Project Structure Specifications (Strictly Follow)

Based on actual web/ directory structure:

```
web/
├── shared/                    # ✅ Implemented: Shared infrastructure
│   ├── events/               # 🎯 Event-driven communication
│   │   ├── EventBus.ts       # Zero-dependency event bus
│   │   └── events.types.ts   # Event type definitions
│   ├── contracts/            # 🎯 Contract interfaces
│   │   ├── AuthContract.ts
│   │   ├── NotificationContract.ts
│   │   └── index.ts
│   ├── signals/              # 🎯 Reactive state
│   │   ├── AppSignals.ts     # Global signal definitions
│   │   └── accessors.ts      # Accessor patterns
│   ├── providers/            # 🎯 Dependency injection
│   │   ├── ContractProvider.tsx
│   │   └── SliceProvider.tsx
│   ├── hooks/                # ✅ Implemented: Standardized hooks
│   │   ├── useAsync.ts       # Async state management
│   │   ├── useLocalStorage.ts # Local storage
│   │   └── useDebounce.ts    # Debounce handling
│   ├── api/                  # ✅ Implemented: API infrastructure
│   │   ├── base.ts           # Base API client
│   │   ├── types.ts          # API type definitions
│   │   └── interceptors.ts   # Request interceptors
│   └── utils/                # Utility functions
└── slices/{slice_name}/      # Slice implementation (4-file structure)
    ├── types.ts              # Type definitions
    ├── api.ts                # API client
    ├── hooks.ts              # Business logic
    ├── view.tsx              # UI components
    └── index.ts              # Unified exports
```

---

## 🛠️ Shared Infrastructure Mandatory Usage Specifications

### ⚠️ Strictly Prohibited Re-implementation Principle
- **Prohibited** to re-implement hooks, api clients, event systems and other basic components
- **Must** prioritize using existing shared infrastructure
- **Should** extend on existing foundation rather than replace

### 🎯 Event-driven Communication Usage (shared/events/)

```typescript
import { eventBus } from '../../shared/events/EventBus';
import type { EventMap } from '../../shared/events/events.types';

/// ✅ Correct: Use existing event system
export function useAuth() {
  const login = async (credentials: LoginRequest) => {
    const response = await authApi.login(credentials);
    
    // Publish login event - publisher doesn't know subscribers
    eventBus.emit('auth:login', {
      user: response.user,
      token: response.token
    });
  };
}

// Other slices listen to events
onMount(() => {
  const unsubscribe = eventBus.on('auth:login', ({ user }) => {
    showNotification(`Welcome back, ${user.name}!`, 'success');
  });
  
  onCleanup(unsubscribe);
});
```

### 🔌 Contract Interface Usage (shared/contracts/)

```typescript
import { useContract } from '../../shared/providers/ContractProvider';

/// ✅ Correct: Use contract interfaces
export function useProfile() {
  const authContract = useContract('auth');     // Depend on interface, not concrete implementation
  const notificationContract = useContract('notification');
  
  const loadProfile = async () => {
    const currentUser = authContract.getCurrentUser();
    if (!currentUser) {
      notificationContract.show('Please login first', 'error');
      return;
    }
    
    // Load user profile...
  };
}
```

### 📡 Signal Reactive Usage (shared/signals/)

```typescript
import { createUserAccessor, createThemeAccessor } from '../../shared/signals/accessors';

/// ✅ Correct: Use accessor pattern
export function useHeader() {
  const userAccessor = createUserAccessor();
  const themeAccessor = createThemeAccessor();
  
  // Automatically respond to user state changes
  const displayName = () => {
    const user = userAccessor.getUser();
    return user ? `Welcome, ${user.name}` : 'Please login';
  };
  
  // Theme toggle
  const toggleTheme = () => themeAccessor.toggleTheme();
  
  return { displayName, toggleTheme, isAuthenticated: userAccessor.isAuthenticated };
}
```

### 🎣 Standardized Hooks Usage (shared/hooks/)

```typescript
import { useAsync } from '../../shared/hooks/useAsync';
import { useDebounce } from '../../shared/hooks/useDebounce';
import { useLocalStorage } from '../../shared/hooks/useLocalStorage';

/// ✅ Correct: Use standardized async state
export function useItems() {
  const { data: items, loading, error, refetch } = useAsync(
    () => itemsApi.list(),
    []  // Dependency array
  );
  
  // Search debouncing
  const [searchTerm, setSearchTerm] = createSignal('');
  const debouncedSearch = useDebounce(searchTerm, 500);
  
  // Local storage
  const [preferences] = useLocalStorage('user-preferences', {});
  
  return { items, loading, error, refetch, searchTerm, setSearchTerm };
}
```

### 🌐 API Client Usage (shared/api/)

```typescript
import { ApiClient } from '../../shared/api/base';
import { createLoggingInterceptor, createTokenRefreshInterceptor } from '../../shared/api/interceptors';

/// ✅ Correct: Inherit base API client
class ItemsApiClient extends ApiClient {
  constructor() {
    super();
    
    // Add interceptors
    this.addRequestInterceptor(createLoggingInterceptor());
    this.addResponseInterceptor(createTokenRefreshInterceptor(() => this.refreshToken()));
  }
  
  async list(): Promise<Item[]> {
    return this.get<Item[]>('/api/items');
  }
  
  async create(item: CreateItemRequest): Promise<Item> {
    return this.post<Item>('/api/items', item);
  }
}

export const itemsApi = new ItemsApiClient();
```

---

## 🧩 Slice Implementation Templates (4-file Standard Structure)

### 📦 A. types.ts - Data Type Definitions

```typescript
// Type definitions consistent with backend API
export interface Item {
  id: string;
  name: string;
  description?: string;
  value: number;
  created_at: string;
  updated_at: string;
}

export interface CreateItemRequest {
  name: string;
  description?: string;
  value?: number;
}

export interface UpdateItemRequest {
  name?: string;
  description?: string;
  value?: number;
}

export interface ItemsListResponse {
  items: Item[];
  total: number;
  page: number;
  page_size: number;
}

// Local state types
export interface ItemsState {
  items: Item[];
  loading: boolean;
  error: string | null;
  searchTerm: string;
  selectedItem: Item | null;
}

// Component Props types
export interface ItemsViewProps {
  className?: string;
  onItemSelect?: (item: Item) => void;
}
```

### 🌐 B. api.ts - API Client Implementation

```typescript
import { ApiClient } from '../../shared/api/base';
import { createLoggingInterceptor } from '../../shared/api/interceptors';
import type { Item, CreateItemRequest, UpdateItemRequest, ItemsListResponse } from './types';

class ItemsApiClient extends ApiClient {
  constructor() {
    super();
    
    // Add necessary interceptors
    this.addRequestInterceptor(createLoggingInterceptor());
  }
  
  async list(page = 1, pageSize = 20): Promise<ItemsListResponse> {
    return this.get<ItemsListResponse>('/api/items', {
      params: { page, page_size: pageSize }
    });
  }
  
  async get(id: string): Promise<Item> {
    return this.get<Item>(`/api/items/${id}`);
  }
  
  async create(data: CreateItemRequest): Promise<Item> {
    return this.post<Item>('/api/items', data);
  }
  
  async update(id: string, data: UpdateItemRequest): Promise<Item> {
    return this.put<Item>(`/api/items/${id}`, data);
  }
  
  async delete(id: string): Promise<void> {
    return this.delete(`/api/items/${id}`);
  }
}

export const itemsApi = new ItemsApiClient();
```

### 🎯 C. hooks.ts - Business Logic and State Management

```typescript
import { createSignal, createResource, onMount, onCleanup } from 'solid-js';
import { useAsync } from '../../shared/hooks/useAsync';
import { useDebounce } from '../../shared/hooks/useDebounce';
import { useContract } from '../../shared/providers/ContractProvider';
import { eventBus } from '../../shared/events/EventBus';
import { createUserAccessor } from '../../shared/signals/accessors';
import { itemsApi } from './api';
import type { Item, CreateItemRequest, ItemsState } from './types';

export function useItems() {
  // Basic state
  const [items, setItems] = createSignal<Item[]>([]);
  const [selectedItem, setSelectedItem] = createSignal<Item | null>(null);
  const [searchTerm, setSearchTerm] = createSignal('');
  
  // Debounced search
  const debouncedSearch = useDebounce(searchTerm, 500);
  
  // Async data fetching
  const { data: itemsData, loading, error, refetch } = useAsync(
    async () => {
      const response = await itemsApi.list();
      setItems(response.items);
      return response;
    },
    []
  );
  
  // Search functionality
  const { data: searchResults, loading: searching } = useAsync(
    async () => {
      const term = debouncedSearch();
      if (!term) return items();
      
      return items().filter(item => 
        item.name.toLowerCase().includes(term.toLowerCase()) ||
        item.description?.toLowerCase().includes(term.toLowerCase())
      );
    },
    [debouncedSearch]
  );
  
  // Communication mechanism usage
  const userAccessor = createUserAccessor();
  const notificationContract = useContract('notification');
  
  // Create item
  const createItem = async (data: CreateItemRequest) => {
    try {
      const newItem = await itemsApi.create(data);
      setItems(prev => [...prev, newItem]);
      
      // Publish event notification
      eventBus.emit('item:created', { item: newItem });
      notificationContract.show('Item created successfully', 'success');
      
      return newItem;
    } catch (error) {
      notificationContract.show('Creation failed', 'error');
      throw error;
    }
  };
  
  // Delete item
  const deleteItem = async (id: string) => {
    try {
      await itemsApi.delete(id);
      setItems(prev => prev.filter(item => item.id !== id));
      
      eventBus.emit('item:deleted', { itemId: id });
      notificationContract.show('Item deleted successfully', 'success');
    } catch (error) {
      notificationContract.show('Deletion failed', 'error');
      throw error;
    }
  };
  
  // Event listening
  onMount(() => {
    const unsubscribe = eventBus.on('auth:logout', () => {
      // Clear data when user logs out
      setItems([]);
      setSelectedItem(null);
    });
    
    onCleanup(unsubscribe);
  });
  
  return {
    // State
    items: searchResults || items,
    selectedItem,
    loading,
    error,
    searching,
    searchTerm,
    
    // Operations
    setSearchTerm,
    setSelectedItem,
    createItem,
    deleteItem,
    refetch,
    
    // Computed properties
    isEmpty: () => items().length === 0,
    totalCount: () => items().length,
    hasSelection: () => selectedItem() !== null,
  };
}

// Single item detail hook
export function useItemDetail(itemId: string) {
  const [item, { refetch }] = createResource(
    () => itemId,
    async (id) => {
      if (!id) return null;
      return itemsApi.get(id);
    }
  );
  
  return { item, refetch };
}
```

### 🎨 D. view.tsx - UI Component Implementation

```typescript
import { Component, For, Show, createSignal } from 'solid-js';
import { useItems } from './hooks';
import type { ItemsViewProps } from './types';

export const ItemsView: Component<ItemsViewProps> = (props) => {
  const { 
    items, 
    loading, 
    searching, 
    searchTerm, 
    setSearchTerm,
    selectedItem,
    setSelectedItem,
    createItem,
    deleteItem 
  } = useItems();
  
  const [showCreateForm, setShowCreateForm] = createSignal(false);
  const [newItemName, setNewItemName] = createSignal('');
  
  const handleCreate = async () => {
    if (!newItemName().trim()) return;
    
    try {
      await createItem({ name: newItemName().trim() });
      setNewItemName('');
      setShowCreateForm(false);
    } catch (error) {
      console.error('Create failed:', error);
    }
  };
  
  return (
    <div class={`items-container ${props.className || ''}`}>
      {/* Search bar */}
      <div class="search-section">
        <input
          type="text"
          placeholder="Search items..."
          value={searchTerm()}
          onInput={(e) => setSearchTerm(e.currentTarget.value)}
          class="search-input"
        />
        <Show when={searching()}>
          <span class="searching-indicator">Searching...</span>
        </Show>
      </div>
      
      {/* Create button */}
      <div class="actions-section">
        <button
          onClick={() => setShowCreateForm(!showCreateForm())}
          class="create-button"
        >
          {showCreateForm() ? 'Cancel' : 'Create Item'}
        </button>
      </div>
      
      {/* Create form */}
      <Show when={showCreateForm()}>
        <div class="create-form">
          <input
            type="text"
            placeholder="Item name"
            value={newItemName()}
            onInput={(e) => setNewItemName(e.currentTarget.value)}
            class="name-input"
          />
          <button
            onClick={handleCreate}
            disabled={!newItemName().trim()}
            class="submit-button"
          >
            Create
          </button>
        </div>
      </Show>
      
      {/* Items list */}
      <Show 
        when={!loading()} 
        fallback={<div class="loading">Loading...</div>}
      >
        <Show 
          when={items().length > 0}
          fallback={<div class="empty-state">No items</div>}
        >
          <div class="items-grid">
            <For each={items()}>
              {(item) => (
                <div 
                  class={`item-card ${selectedItem()?.id === item.id ? 'selected' : ''}`}
                  onClick={() => {
                    setSelectedItem(item);
                    props.onItemSelect?.(item);
                  }}
                >
                  <h3 class="item-name">{item.name}</h3>
                  <Show when={item.description}>
                    <p class="item-description">{item.description}</p>
                  </Show>
                  <div class="item-meta">
                    <span class="item-value">Value: {item.value}</span>
                    <button
                      onClick={(e) => {
                        e.stopPropagation();
                        deleteItem(item.id);
                      }}
                      class="delete-button"
                    >
                      Delete
                    </button>
                  </div>
                </div>
              )}
            </For>
          </div>
        </Show>
      </Show>
    </div>
  );
};

// Item detail component
export const ItemDetailView: Component<{ itemId: string }> = (props) => {
  const { item } = useItemDetail(props.itemId);
  
  return (
    <Show 
      when={item()} 
      fallback={<div class="loading">Loading item details...</div>}
    >
      {(currentItem) => (
        <div class="item-detail">
          <h1>{currentItem().name}</h1>
          <Show when={currentItem().description}>
            <p class="description">{currentItem().description}</p>
          </Show>
          <div class="metadata">
            <p>Value: {currentItem().value}</p>
            <p>Created: {currentItem().created_at}</p>
            <p>Updated: {currentItem().updated_at}</p>
          </div>
        </div>
      )}
    </Show>
  );
};
```

### 📤 E. index.ts - Unified Exports

```typescript
// Export components
export { ItemsView, ItemDetailView } from './view';

// Export hooks
export { useItems, useItemDetail } from './hooks';

// Export types
export type { 
  Item, 
  CreateItemRequest, 
  UpdateItemRequest, 
  ItemsListResponse,
  ItemsState,
  ItemsViewProps 
} from './types';

// Export API client
export { itemsApi } from './api';

// Slice metadata
export const SLICE_INFO = {
  name: 'items',
  version: '1.0.0',
  description: 'Item management slice',
  dependencies: ['auth', 'notification'],
  contracts: ['auth', 'notification'],
  events: ['item:created', 'item:updated', 'item:deleted'],
  signals: ['user', 'theme']
} as const;
```

---

## 🧪 Testing Specifications

### A. Unit Test Template

```typescript
// slices/items/__tests__/hooks.test.ts
import { describe, test, expect, vi, beforeEach } from 'vitest';
import { renderHook, waitFor } from '@solidjs/testing-library';
import { useItems } from '../hooks';
import { itemsApi } from '../api';

// Mock API
vi.mock('../api', () => ({
  itemsApi: {
    list: vi.fn(),
    create: vi.fn(),
    delete: vi.fn(),
  }
}));

describe('useItems', () => {
  beforeEach(() => {
    vi.clearAllMocks();
  });

  test('should correctly load items list', async () => {
    const mockItems = [
      { id: '1', name: 'Test Item', value: 100, created_at: '2024-01-01', updated_at: '2024-01-01' }
    ];
    
    vi.mocked(itemsApi.list).mockResolvedValue({
      items: mockItems,
      total: 1,
      page: 1,
      page_size: 20
    });

    const { result } = renderHook(() => useItems());

    await waitFor(() => {
      expect(result().loading).toBe(false);
      expect(result().items()).toHaveLength(1);
      expect(result().items()[0].name).toBe('Test Item');
    });
  });

  test('should correctly handle search', async () => {
    const { result } = renderHook(() => useItems());
    
    result().setSearchTerm('test');
    
    await waitFor(() => {
      expect(result().searchTerm()).toBe('test');
    });
  });
});
```

### B. Component Test Template

```typescript
// slices/items/__tests__/view.test.tsx
import { describe, test, expect, vi } from 'vitest';
import { render, screen, fireEvent } from '@solidjs/testing-library';
import { ItemsView } from '../view';

// Mock hooks
vi.mock('../hooks', () => ({
  useItems: () => ({
    items: () => [
      { id: '1', name: 'Test Item', value: 100 }
    ],
    loading: () => false,
    searching: () => false,
    searchTerm: () => '',
    setSearchTerm: vi.fn(),
    createItem: vi.fn(),
    deleteItem: vi.fn(),
  })
}));

describe('ItemsView', () => {
  test('should render items list', () => {
    render(() => <ItemsView />);
    
    expect(screen.getByText('Test Item')).toBeInTheDocument();
    expect(screen.getByText('Value: 100')).toBeInTheDocument();
  });

  test('should handle search input', () => {
    render(() => <ItemsView />);
    
    const searchInput = screen.getByPlaceholderText('Search items...');
    fireEvent.input(searchInput, { target: { value: 'test' } });
    
    expect(searchInput.value).toBe('test');
  });
});
```

---

## ⚠️ Anti-patterns and Error Prevention

<anti_patterns>
❌ **Prohibited Anti-patterns**:

1. **Direct Slice Dependencies**
   ```typescript
   // ❌ Wrong: Direct dependency on other slices
   import { useAuth } from '../auth/hooks';
   
   // ✅ Correct: Dependency through contract interfaces
   const authContract = useContract('auth');
   ```

2. **Re-implementing Infrastructure**
   ```typescript
   // ❌ Wrong: Re-implementing async state
   const [loading, setLoading] = createSignal(false);
   const [error, setError] = createSignal(null);
   
   // ✅ Correct: Use standardized hook
   const { loading, error } = useAsync(() => api.getData());
   ```

3. **Ignoring Event Cleanup**
   ```typescript
   // ❌ Wrong: Forgetting to cleanup event listeners
   onMount(() => {
     eventBus.on('some:event', handler);
   });
   
   // ✅ Correct: Proper cleanup
   onMount(() => {
     const unsubscribe = eventBus.on('some:event', handler);
     onCleanup(unsubscribe);
   });
   ```

4. **Breaking Signal Fine-granularity**
   ```typescript
   // ❌ Wrong: Large object signal
   const [state, setState] = createSignal({ items: [], loading: false, error: null });
   
   // ✅ Correct: Separate signals
   const [items, setItems] = createSignal([]);
   const [loading, setLoading] = createSignal(false);
   const [error, setError] = createSignal(null);
   ```

5. **Ignoring Type Safety**
   ```typescript
   // ❌ Wrong: Using any type
   const handleData = (data: any) => { ... };
   
   // ✅ Correct: Using specific types
   const handleData = (data: Item[]) => { ... };
   ```
</anti_patterns>

---

## 📊 Slice Independence Verification Checklist

After implementation completion, please check:

- [ ] **Zero Compile Dependencies**: Does the slice have no direct imports of other slices?
- [ ] **Infrastructure Reuse**: Are existing hooks, api, events, signals components being used?
- [ ] **Correct Communication Mechanisms**: Are the right communication methods chosen based on scenarios?
- [ ] **Type Safety**: Do all interfaces have complete TypeScript types?
- [ ] **Reactive Optimization**: Is SolidJS's fine-grained reactivity fully utilized?
- [ ] **Error Handling**: Is there complete error handling and user feedback?
- [ ] **Test Coverage**: Are hooks and component tests included?
- [ ] **Independent Building**: Can the slice be independently tested and run?

If issues are found, please re-optimize the implementation.

---

## 🎯 Development Workflow

### New Slice Development Steps:

1. **📋 Analyze Requirements**: Determine business domain, data flow, and communication needs
2. **🔄 Choose Communication Mechanisms**: Select events, contracts, signals, or Provider based on scenarios
3. **📦 Define Types**: Define complete TypeScript types in `types.ts`
4. **🌐 Implement API**: Inherit base API client in `api.ts`
5. **🎯 Write Business Logic**: Use standardized hooks and communication mechanisms in `hooks.ts`
6. **🎨 Create UI Components**: Implement SolidJS components in `view.tsx`
7. **📤 Unified Exports**: Export public interfaces in `index.ts`
8. **🧪 Write Tests**: Create complete test cases
9. **✅ Verify Independence**: Ensure slice can be independently built and tested

### Code Quality Assurance:

- Strictly follow 4-file structure
- Maintain zero compile dependencies between slices
- Fully utilize shared infrastructure
- Implement complete type safety
- Ensure fine-grained reactive updates

---

## 🚀 Performance Optimization Tips

### 1. SolidJS Fine-grained Reactivity

```typescript
// ✅ Separate signals to avoid unnecessary re-renders
const [user, setUser] = createSignal(null);
const [profile, setProfile] = createSignal(null);

// Only re-render when username changes
<span>{user()?.name}</span>

// Only re-render when avatar changes  
<img src={profile()?.avatar} />
```

### 2. Computed Property Caching

```typescript
// ✅ Use createMemo to cache computation results
const expensiveComputation = createMemo(() => {
  return items().filter(item => item.value > 1000).length;
});
```

### 3. Component Lazy Loading

```typescript
// ✅ Component-level code splitting
const LazyItemDetail = lazy(() => import('./ItemDetailView'));

<Show when={showDetail()}>
  <Suspense fallback={<div>Loading...</div>}>
    <LazyItemDetail itemId={selectedId()} />
  </Suspense>
</Show>
```

### 4. Event Debouncing

```typescript
// ✅ Use debouncing to reduce API calls
const debouncedSearch = useDebounce(searchTerm, 500);
```

---

## 🎯 Core Value Summary

### Web v7 = Slice Independence + Lightweight Architecture + Shared Infrastructure

1. **✅ Slice Independence**: Zero compile dependencies, completely independent development and testing
2. **✅ Four Communication Mechanisms**: Event-driven, contract interfaces, signal reactive, Provider pattern
3. **✅ Shared Infrastructure**: Standardized hooks, API clients, utility functions
4. **✅ Signal-First Design**: Fully utilize SolidJS fine-grained reactivity
5. **✅ Type Safety Guarantee**: Complete TypeScript support, compile-time error checking
6. **✅ High Performance Features**: Zero virtual DOM, compile-time optimization, on-demand loading

### Applicable Scenarios

- **Medium to Large Frontend Applications**: Requiring multi-team parallel development
- **Micro-frontend Architecture**: Requiring independent module deployment
- **High Performance Requirements**: Requiring fine-grained reactive updates
- **Type Safety Requirements**: Requiring compile-time error checking
- **Long-term Maintenance Projects**: Requiring good code organization and extensibility

---

**The Web v7 paradigm provides a complete, efficient, and maintainable solution for modern frontend development, ensuring the perfect balance of code quality and development efficiency through strict architectural principles and rich infrastructure.** 