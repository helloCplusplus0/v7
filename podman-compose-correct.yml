# 🐳 V7 项目 - 云端容器编排（正确架构版）
# 
# 🏗️ 实际架构：
#   ☁️ 云服务器: Backend(容器) + Web(容器)
#   🏠 本地局域网: Analytics Engine(systemd服务)
#   🔐 连接: WireGuard VPN
#
# 🔧 核心修复：
#   - Backend和Web使用统一bridge网络（解决nginx hostname问题）
#   - Backend通过WireGuard VPN（10.0.0.x网段）访问本地Analytics Engine
#   - 不依赖host.containers.internal（那是访问云服务器本地的）

version: '3.8'

# 🌐 网络配置
networks:
  v7-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# 📦 数据卷配置  
volumes:
  backend-data:
    driver: local
  backend-logs:
    driver: local
  web-cache:
    driver: local

# 🚀 服务配置
services:
  # 🦀 Backend 服务 - Rust FMOD v7 + gRPC
  backend:
    image: ${BACKEND_IMAGE:-ghcr.io/hellocplusplus0/v7/backend:latest}
    container_name: v7-backend
    restart: unless-stopped
    
    # 🌐 网络配置 - 使用bridge网络，通过WireGuard访问Analytics Engine
    networks:
      - v7-network
    
    # 🔌 端口映射
    ports:
      - "${BACKEND_HTTP_PORT:-3000}:3000"   # HTTP健康检查
      - "${BACKEND_GRPC_PORT:-50053}:50053" # gRPC服务
    
    # 🌍 环境变量配置
    environment:
      # 服务配置
      - NODE_ENV=production
      - RUST_LOG=info
      - HTTP_PORT=3000
      - GRPC_PORT=50053
      
      # 数据库配置
      - DATABASE_URL=sqlite:/app/data/prod.db
      - ENABLE_PERSISTENCE=true
      - CREATE_TEST_DATA=false
      
      # 🔑 关键修复：Analytics Engine通过WireGuard VPN访问本地局域网
      # VPN网段：10.0.0.x（根据WireGuard配置）
      # 本地Analytics Engine地址：10.0.0.1:50051（WireGuard客户端IP）
      - ANALYTICS_ENGINE_ENDPOINT=http://10.0.0.1:50051
      - ANALYTICS_CONNECTION_TIMEOUT_SEC=10
      - ANALYTICS_REQUEST_TIMEOUT_SEC=30
      
      # 性能调优配置
      - MALLOC_ARENA_MAX=2
      - MALLOC_TRIM_THRESHOLD_=131072
    
    # 📁 数据卷挂载
    volumes:
      - backend-data:/app/data:Z
      - backend-logs:/app/logs:Z
      - /tmp:/tmp/app-runtime:Z
    
    # 🔒 安全配置
    user: "${BACKEND_UID:-1002}:${BACKEND_GID:-1002}"
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    
    # 📊 资源限制
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.1'
    
    # 🏥 健康检查 - 修复：使用wget替代curl
    healthcheck:
      test: ["CMD", "/app/backend", "--health-check"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    
    # 🔄 依赖关系
    depends_on: []

  # 🌐 Web 服务 - SolidJS + TypeScript + Vite + nginx
  web:
    image: ${WEB_IMAGE:-ghcr.io/hellocplusplus0/v7/web:latest}
    container_name: v7-web
    restart: unless-stopped
    
    # 🌐 网络配置 - 与backend在同一bridge网络
    networks:
      - v7-network
    
    # 🔌 端口映射
    ports:
      - "${WEB_PORT:-8080}:80"
    
    # 🌍 环境变量配置
    environment:
      - NODE_ENV=production
      # nginx可以通过hostname "backend" 访问backend服务
      - BACKEND_URL=http://backend:3000
      - BACKEND_GRPC_URL=http://backend:50053
    
    # 📁 数据卷挂载
    volumes:
      - web-cache:/var/cache/nginx:Z
    
    # 🔒 安全配置
    user: "${WEB_UID:-1003}:${WEB_GID:-1003}"
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /var/run:noexec,nosuid,size=50m
      - /tmp:noexec,nosuid,size=50m
    
    # 📊 资源限制
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'
        reservations:
          memory: 64M
          cpus: '0.05'
    
    # 🏥 健康检查
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    
    # 🔄 依赖关系
    depends_on:
      - backend

# 📝 部署说明
# 
# 🚀 部署命令:
#   podman-compose -f podman-compose-correct.yml up -d
# 
# 🔐 WireGuard前置条件:
#   1. 云服务器已安装WireGuard客户端
#   2. 已配置VPN连接到本地局域网（10.0.0.x网段）
#   3. 本地Analytics Engine运行在10.0.0.1:50051
# 
# 🧪 验证连接:
#   podman exec v7-backend wget -qO- http://10.0.0.1:50051/health
# 
# 🔧 网络架构:
#   - Web ←→ Backend: bridge网络内部通信（hostname解析）
#   - Backend ←→ Analytics: WireGuard VPN跨网络通信
#   - 外部访问: 云服务器IP:8080(web), IP:3000(backend-http), IP:50053(backend-grpc) 