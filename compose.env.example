# V7项目 Backend + Web 容器编排环境变量配置
# Analytics Engine 使用 systemd 部署，获得最佳性能
# 
# 🎯 使用方法
# ===================
# 
# 🏭 生产环境：混合部署架构
#   1. 部署 Analytics Engine: cd analytics-engine && sudo -u analytics ./scripts/deploy.sh
#   2. 复制配置: cp compose.env.example .env
#   3. 启动容器: podman-compose up -d
#   特点：性能最优，复杂度适中，生产稳定
# 
# 🧪 开发/测试环境：容器化测试
#   1. Analytics Engine 本地运行: cd analytics-engine && ./scripts/run.sh &
#   2. 复制配置: cp compose.env.example .env.test  
#   3. 启动容器: podman-compose --env-file .env.test up -d
#   特点：环境一致，快速搭建，便于测试

# ========================================
# 🌍 全局配置
# ========================================
NODE_ENV=production
RUST_LOG=info
TZ=Asia/Shanghai

# ========================================
# 🔌 服务端口配置（参数化避免冲突）
# ========================================
# Backend 服务端口
BACKEND_HTTP_PORT=3000
BACKEND_GRPC_PORT=50053

# Web 服务端口
WEB_PORT=8080

# ⚠️  Analytics Engine配置已移至下方WireGuard VPN section
# 旧的ANALYTICS_ENGINE_ADDR已废弃，请使用ANALYTICS_ENGINE_ENDPOINT

# ========================================
# 🐳 容器镜像配置
# ========================================
BACKEND_IMAGE=v7-backend:latest
WEB_IMAGE=v7-web:latest

# 🏷️ 企业级镜像仓库配置（可选）
# BACKEND_IMAGE=registry.company.com/v7/backend:1.0.0
# WEB_IMAGE=registry.company.com/v7/web:1.0.0

# ========================================
# 👤 容器用户配置（安全）
# ========================================
# Backend 用户配置
BACKEND_UID=1002
BACKEND_GID=1002

# Web 用户配置  
WEB_UID=1001
WEB_GID=1001

# ========================================
# 🗄️ 数据库配置
# ========================================
# Backend 数据库路径（容器内）
DATABASE_URL=sqlite:/app/data/prod.db

# ========================================
# 🚀 性能调优配置
# ========================================
# 内存分配器优化
MALLOC_ARENA_MAX=2
MALLOC_TRIM_THRESHOLD_=131072

# Rust 运行时配置
RUST_BACKTRACE=1

# ========================================
# 📊 监控配置（可选）
# ========================================
# 启用详细日志（调试时启用）
# RUST_LOG=debug

# 启用性能监控（生产环境建议启用）
# ENABLE_METRICS=true

# ========================================
# 🔗 Analytics Engine 连接配置（WireGuard VPN）
# ========================================
# 🏭 开发环境：本地直连 (所有服务在192.168.31.84)
ANALYTICS_ENGINE_ENDPOINT=http://127.0.0.1:50051

# 🔐 生产环境：通过WireGuard VPN连接本地Analytics Engine  
# 使用场景：云端backend(host网络) → WireGuard VPN → 本地analytics-engine
# ANALYTICS_ENGINE_ENDPOINT=http://10.0.0.1:50051

# 📍 远程部署：Analytics Engine 在独立服务器（直连）
# ANALYTICS_ENGINE_ENDPOINT=http://192.168.1.100:50051

# ⚠️  注意：backend使用host网络模式，可直接访问主机网络栈
# 包括WireGuard VPN接口(wg0)，无需host.containers.internal

# ========================================
# 🌐 网络配置（高级）
# ========================================
# 容器网络子网（避免冲突）
V7_NETWORK_SUBNET=172.20.0.0/16

# 🔒 CORS 配置（Web开发时可能需要）
# ENABLE_CORS=true
# CORS_ORIGINS=http://localhost:3000,http://localhost:5173

# ========================================
# 📝 开发配置（开发环境专用）
# ========================================
# 开发模式（增加调试信息）
# NODE_ENV=development
# RUST_LOG=debug

# 开发端口（避免与生产冲突）
# WEB_PORT=8081
# BACKEND_HTTP_PORT=3001
# BACKEND_GRPC_PORT=50054 